<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MessageMedia</name>
    </assembly>
    <members>
        <member name="T:MessageMedia.Gateway.v2.RepliesReturn">
            <summary>
            the return from the gateway when checking replies
            </summary>
        </member>
        <member name="T:MessageMedia.Gateway.v2.SuccessReturn">
            <summary>
            Object that is returned which shows whether an action was successful
            </summary>
        </member>
        <member name="T:MessageMedia.Gateway.Return">
            <summary>
            Represents the response made by the gateway to a messaging action.
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.Return.AccountUsed">
            <summary>
            The <see cref="T:MessageMedia.Account"/> that was used to perform the action.
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.Return.Exception">
            <summary>
            Contains any exceptions that occur during processing.
            </summary>
        </member>
        <member name="M:MessageMedia.Gateway.v2.SuccessReturn.#ctor">
            <summary>
            default constructor for xml
            </summary>
        </member>
        <member name="M:MessageMedia.Gateway.v2.SuccessReturn.#ctor(System.Boolean)">
            <summary>
            Constructor override
            </summary>
            <param name="success">was the action successful</param>
        </member>
        <member name="P:MessageMedia.Gateway.v2.SuccessReturn.Success">
            <summary>
            Gets or sets whether the action was successful.
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.v2.RepliesReturn.Replies">
            <summary>
            the list of replies
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.v2.RepliesReturn.DeliveryReports">
            <summary>
            Gets the list of delivery reports that were downloaded from the gateway.
            </summary>
        </member>
        <member name="T:MessageMedia.Gateway.IAction">
            <summary>
            Interface for all gateway actions.
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.IAction.ActionType">
            <summary>
            Gets the type of action.
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.IAction.TestMode">
            <summary>
            Gets whether the action should be executed in test mode.
            </summary>
        </member>
        <member name="M:MessageMedia.Gateway.v2.ConfirmRepliesAction.GetPost(MessageMedia.Account)">
            <summary>
            Prepares the POST string to perform a Confirm Replies
            </summary>
            <param name="account">The Account object to use for Username and Password, etc</param>
            <returns>POST string</returns>
            <exception cref="T:MessageMedia.Exceptions.InvalidUserPassException"></exception>
        </member>
        <member name="T:MessageMedia.Voice.VoiceReply">
            <summary>
            Incoming voice message class.
            </summary>
        </member>
        <member name="T:MessageMedia.Common.MessageIn">
            <summary>
            Base Class for incoming messages.
            </summary>
        </member>
        <member name="T:MessageMedia.Common.Message">
            <summary>
            Base class for all messages.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.Message.MessageIDMinimum">
            <summary>
            The minimum valid message ID to use when manually creating a message ID.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.Message.MessageIDMaximum">
            <summary>
            The maximum valid message ID to use when manually creating a message ID.
            </summary>
        </member>
        <member name="P:MessageMedia.Common.Message.MessageID">
            <summary>
            Gets or sets the ID of the Message.
            </summary>
            <remarks>
            If you set this value for an outgoing message, any incoming replies or reports will return the same value.
            Leaving <b>MessageID</b> = -1 (the default value) will result in an ID being randomly generated.
            </remarks>
            <exception cref="T:MessageMedia.Exceptions.InvalidMessageIdException"></exception>
        </member>
        <member name="P:MessageMedia.Common.MessageIn.PhoneNumber">
            <summary>
            Gets or sets the phone number the message came from.
            </summary>
        </member>
        <member name="P:MessageMedia.Common.MessageIn.Received">
            <summary>
            Gets or sets the date and time that the message was received (on the gateway).
            </summary>
        </member>
        <member name="P:MessageMedia.Common.MessageIn.Age">
            <summary>
            Gets or sets the age of the message in seconds.
            </summary>
            <remarks>
            The age of the message is calculated from the time the message was received on the gateway.
            </remarks>
        </member>
        <member name="P:MessageMedia.Common.MessageIn.MessageText">
            <summary>
            Gets or sets the text of the message.
            </summary>
        </member>
        <member name="P:MessageMedia.Voice.VoiceReply.MessageText">
            <summary>
            Gets or sets the text of the message.
            </summary>
        </member>
        <member name="T:MessageMedia.ServerSettings">
            <summary>
            This class stores the settings that are used when communicating with the MessageMedia gateway.
            </summary>
        </member>
        <member name="M:MessageMedia.ServerSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MessageMedia.ServerSettings.Clone">
            <summary>
            Clones this <see cref="T:MessageMedia.ServerSettings"/> instance.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:MessageMedia.ServerSettings.LoadSettings(Microsoft.Win32.RegistryKey)">
            <summary>
            Loads the gateway settings from the specified registry key.
            </summary>
            <param name="FromRegistryKey">An existing registry key, with read/write permissions.</param>
            <returns>True if the values were successfully loaded, false otherwise.</returns>
        </member>
        <member name="M:MessageMedia.ServerSettings.SaveSettings(Microsoft.Win32.RegistryKey)">
            <summary>
            Save the settings to the specified registry key.
            </summary>
            <param name="ToRegistryKey">An existing registry key, with read/write permissions.</param>
            <returns>True if the values were successfully saved, false otherwise.</returns>
        </member>
        <member name="M:MessageMedia.ServerSettings.LoadSettings(System.String)">
            <summary>
            Loads the settings from the specified file.
            </summary>
            <param name="FileName">An existing XML file, with read/write permissions.</param>
            <returns>True if the values were successfully loaded, false otherwise.</returns>
        </member>
        <member name="M:MessageMedia.ServerSettings.SaveSettings(System.String)">
            <summary>
            Saves the settings to the specified file.
            </summary>
            <param name="FileName">an xml file, with read/write permissions</param>
            <returns>True if the values were successfully saved, false otherwise.</returns>
        </member>
        <member name="P:MessageMedia.ServerSettings.MinCheckReplyInterval">
            <summary>
            Gets the minimum interval permitted between successive calls to <see cref="M:MessageMedia.Messaging.CheckReplies"/>
            or <see cref="M:MessageMedia.Messaging.CheckReplies(MessageMedia.Account)"/>.
            </summary>
            <remarks>
            The minimum interval between successive reply checks is 60 seconds. If <see cref="M:MessageMedia.Messaging.CheckReplies"/>
            or <see cref="M:MessageMedia.Messaging.CheckReplies(MessageMedia.Account)"/> is called more than once per 60 seconds it will return false
            without doing anything.
            </remarks>
        </member>
        <member name="P:MessageMedia.ServerSettings.Logger">
            <summary>
            Gets or sets the logger object that will be used to log any output.
            </summary>
        </member>
        <member name="P:MessageMedia.ServerSettings.ValidityPeriod">
            <summary>
            Gets or sets the validity period for a message within the mobile network.
            </summary>
            <value>The default validity period is 2 days.</value>
            <remarks>
            Once sent, the mobile network will continue to attempt delivery until the
            validity period has expired.
            </remarks>
        </member>
        <member name="P:MessageMedia.ServerSettings.DeliveryReport">
            <summary>
            Gets or sets whether a delivery report for this message is required (may incur additional charges).
            </summary>
            <value>The default value for this property is false.</value>
            <remarks>
            Delivery reporting enables tracking of messages, showing your application the exact
            time that each message you send is delivered on the handset (this provides your application
            with an audit trail and enables escalation in the event of non-delivery). Please note that
            delivery reporting is somewhat carrier specific. While most carriers will send delivery reports
            that detail the time and date that the message arrived on the recipient's handset, some carriers
            will respond with the time and date that the message arrived on the mobile phone network and mark
            the message as "Pending". Other more obscure carriers may choose to not send delivery reports
            at all even if they are requested.
            </remarks>
        </member>
        <member name="P:MessageMedia.ServerSettings.LastMessageID">
            <summary>
            Gets or sets the last message ID that was assigned to a message.  
            </summary>
            <remarks>
            The value of this property will be incremented before it is assigned to the next message.
            </remarks>
        </member>
        <member name="P:MessageMedia.ServerSettings.NextMessageID">
            <summary>
            Gets or sets the next message ID to be assigned to a message.  
            </summary>
        </member>
        <member name="P:MessageMedia.ServerSettings.SplitLongMessages">
            <summary>
            Gets or sets whether long messages should be split up.
            </summary>
            <value>The default value for this property is false.</value>
            <remarks>
            If the value of this property is left as false the API will use Nokia concatenation for messages
            greater than 160 characters in length. Nokia concatenation is a standard form of concatenation
            that allows long messages to be split up over the network but are reassembled on the recipient's
            handset as one long message; as far as the recipient is concerned the long message appears as just
            that: one long message. This is the default.
            <p>
            If the value of this property is set to true messages greater than 160 characters in length are
            explicitly split. Long messages (messages with greater than 160 characters) are split and sent
            out in portions at 20 second intervals and are tagged as linked. The first message is appended
            with "...(1/X)" where X is the total number of sub-messages required to send the long message.
            Subsequent messages are prepended with "(2/X)", "(3/X)" and so on up to "(X/X)". The API attempts
            to split long messages intelligently at appropriate positions, e.g. after spaces, periods, commas, etc.
            </p>
            </remarks>
        </member>
        <member name="P:MessageMedia.ServerSettings.AutoReceiveWaitTime">
            <summary>
            Gets or sets how long to wait between automatic check reply actions.
            </summary>
            <value>The default value for this property is 5 minutes.</value>
            <remarks>
            When <see cref="P:MessageMedia.Messaging.AutoReceive"/> is set to true the value of this property
            will determine how long to wait between reply checks. For example, if the value of this property
            is set to 5 minutes then every 5 minutes the API will perform a reply check and download any
            waiting reply messages. Note: the value of this property cannot be set to less than 1 minute.
            </remarks>
        </member>
        <member name="P:MessageMedia.ServerSettings.AutoConfirm">
            <summary>
            Gets or sets whether to automatically confirm receipt of replies and delivery reports.
            </summary>
            <value>The default value for this property is true.</value>
            <remarks>
            After reply messages and delivery reports are downloaded from the MessageMedia gateway the gateway
            will continue to store the replies and reports until it receives confirmation that they have been
            successfully downloaded. When it receives confirmation it marks the downloaded replies and reports
            for deletion. To prevent leaving too many copies of replies and reports on the gateway this
            property serves to automatically confirm receipt of downloaded replies and reports.
            </remarks>
        </member>
        <member name="P:MessageMedia.ServerSettings.AutoCheck">
            <summary>
            Gets or sets whether to automatically check for replies.
            </summary>
            <value>The default value for this property is true.</value>
            <remarks>
            Note, this property does not actually turn automatic reply checking on or off. This property is
            stored in the registry or to file when <see cref="M:MessageMedia.ServerSettings.SaveSettings(Microsoft.Win32.RegistryKey)"/> or
            <see cref="M:MessageMedia.ServerSettings.SaveSettings(System.String)"/> is called, respectively. It is loaded from the registry or from
            file when <see cref="M:MessageMedia.ServerSettings.LoadSettings(Microsoft.Win32.RegistryKey)"/> or <see cref="M:MessageMedia.ServerSettings.LoadSettings(System.String)"/> is called, respectively.
            It is used to remember whether to enable auto-receiving the feature of the API. The reason for not saving/loading
            the value of <see cref="P:MessageMedia.Messaging.AutoReceive"/> directly is that setting this property results in
            the MessageMedia gateway being contacted and as such it may be undesirable to perform a connection at the time
            when the settings are being loaded from the registry. Instead, this property is provided to remember whether to
            enable or disable automatic receive when your application is ready.
            </remarks>
        </member>
        <member name="P:MessageMedia.ServerSettings.TimeOut">
            <summary>
            Gets or sets the internet connection timeout in seconds.
            </summary>
            <value>The default timeout value is 30 seconds and the minimum is 10 seconds.</value>
            <remarks>
            This property determines how long in seconds to wait before a request to the gateway times out.
            </remarks>
        </member>
        <member name="P:MessageMedia.ServerSettings.BatchSize">
            <summary>
            Gets or sets the number of messages to send in a batch.
            </summary>
            <value>The default value for this property is 100.</value>
            <remarks>
            This property determines the number of messages to be transferred at one time.
            Recommended values are in the range of 50 to 300. Larger values will take longer
            to send, and may time out, resulting in the entire batch needing to be sent again.
            Lower values reduce the risk of failure when operating over a slow internet connection.
            If you are operating over a slow internet connection and you receive timeout errors it
            is recommended that you either decrease the value of <see cref="P:MessageMedia.ServerSettings.BatchSize"/> or increase
            the value of <see cref="P:MessageMedia.ServerSettings.TimeOut"/>.
            </remarks>
        </member>
        <member name="P:MessageMedia.ServerSettings.SecureServer">
            <summary>
            Gets or sets whether to securely tranfer messages.
            </summary>
            <value>The default value for this property is false.</value>
            <remarks>
            When this property is enabled, the API uses SSL port 443 rather than HTTP
            port 80 and all message transfer is encrypted with 128-bit key encryption.
            </remarks>
        </member>
        <member name="P:MessageMedia.ServerSettings.Proxy">
            <summary>
            Gets or sets the details of the proxy gateway required to access the internet (if one is required).
            </summary>
            <value>
            By default the value of <see cref="P:MessageMedia.ProxyDetails.UseProxy"/> or the property <see cref="P:MessageMedia.ServerSettings.Proxy"/>
            is set to false. When this value is false the API will use Internet Explorer's proxy settings if they are
            available.
            </value>
        </member>
        <member name="P:MessageMedia.ServerSettings.TestMode">
            <summary>
            Gets or sets whether to operate in test mode.
            </summary>
            <value>The default value for this property is false.</value>
            <remarks>
            In test mode messages are not actually posted to the gateway (no credit used) but post strings are
            logged using <see cref="P:MessageMedia.ServerSettings.Logger"/>.
            </remarks>
        </member>
        <member name="P:MessageMedia.ServerSettings.Servers">
            <summary>
            List of servers to use when accessing the MessageMedia gateway.
            </summary>
        </member>
        <member name="T:MessageMedia.Schedule.WeeklyRecurrence">
            <summary>
            Messages of this recurrence type will be sent every X number of weeks, on the days specified.
            </summary>
        </member>
        <member name="T:MessageMedia.Schedule.Recurrence">
            <summary>
            Abstract base class of all recurrence classes.
            </summary>
        </member>
        <member name="T:MessageMedia.Schedule.Scheduled">
            <summary>
            Class used to provide scheduling information for messages that are scheduled for future delivery.
            </summary>
        </member>
        <member name="M:MessageMedia.Schedule.Scheduled.ToString">
            <summary>
            Format the schedule into human readable format.
            </summary>
            <returns>The schedule description as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="P:MessageMedia.Schedule.Scheduled.StartDate">
            <summary>
            Gets or sets the date on which the scheduled task is to start.
            </summary>
        </member>
        <member name="P:MessageMedia.Schedule.Scheduled.SendTime">
            <summary>
            Gets or sets the time at which the scheduled task is to occur.
            </summary>
        </member>
        <member name="M:MessageMedia.Schedule.Recurrence.SequenceText(System.Int32)">
            <summary>
            Formats a number to read like "1st", "2nd", "3rd", etc.
            </summary>
            <param name="Sequence">The number to format.</param>
            <returns>The number formatted as a string.</returns>
        </member>
        <member name="P:MessageMedia.Schedule.Recurrence.RecurIndefinitely">
            <summary>
            Gets or sets whether the recurrence will continue indefinitely (ignoring <see cref="P:MessageMedia.Schedule.Recurrence.EndDate"/>).
            </summary>
        </member>
        <member name="P:MessageMedia.Schedule.Recurrence.EndDate">
            <summary>
            Gets or sets the date that the recurrence will continue until.
            </summary>
            <remarks>This property is ignored if <see cref="P:MessageMedia.Schedule.Recurrence.RecurIndefinitely"/> is true.</remarks>
        </member>
        <member name="M:MessageMedia.Schedule.WeeklyRecurrence.ToString">
            <summary>
            Format the schedule into human readable format.
            </summary>
            <returns>The schedule description as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="P:MessageMedia.Schedule.WeeklyRecurrence.Days">
            <summary>
            Gets or sets the bitmask that represents the days to send the message on.
            </summary>
        </member>
        <member name="P:MessageMedia.Schedule.WeeklyRecurrence.Weeks">
            <summary>
            Gets or sets the number of weeks that must pass before the message is resent (e.g. every 3rd week).
            </summary>
        </member>
        <member name="T:MessageMedia.Schedule.MonthlyRecurrence">
            <summary>
            Abstract base class for monthly recurrence. Use concrete classes <see cref="T:MessageMedia.Schedule.MonthlyDateRecurrence"/> or <see cref="T:MessageMedia.Schedule.MonthlyDayRecurrence"/>.
            </summary>
        </member>
        <member name="P:MessageMedia.Schedule.MonthlyRecurrence.Months">
            <summary>
            Gets or sets the number of months that must pass before the message is resent.
            </summary>
        </member>
        <member name="T:MessageMedia.Schedule.MonthlyDateRecurrence">
            <summary>
            Message will be sent on a fixed date each month. For example, the 5th day of each month.
            </summary>
        </member>
        <member name="M:MessageMedia.Schedule.MonthlyDateRecurrence.ToString">
            <summary>
            Format the schedule into human readable format.
            </summary>
            <returns>The schedule description as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="P:MessageMedia.Schedule.MonthlyDateRecurrence.Date">
            <summary>
            Gets or sets the day of each month on which the message will be sent.
            </summary>
        </member>
        <member name="T:MessageMedia.Schedule.MonthlyDayRecurrence">
            <summary>
            Message will be sent on a specified day of the week of each month. For example, the 2nd Tuesday of each month.
            </summary>
        </member>
        <member name="M:MessageMedia.Schedule.MonthlyDayRecurrence.ToString">
            <summary>
            Format the schedule into human readable format.
            </summary>
            <returns>The schedule description as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="P:MessageMedia.Schedule.MonthlyDayRecurrence.Sequence">
            <summary>
            Gets or sets the sequence of the day to use.
            </summary>
        </member>
        <member name="P:MessageMedia.Schedule.MonthlyDayRecurrence.Day">
            <summary>
            Gets or sets the day of the week on which the message will be sent.
            </summary>
        </member>
        <member name="T:MessageMedia.Schedule.DailyRecurrence">
            <summary>
            Messages of this recurrence type will be sent every X number of days.
            </summary>
        </member>
        <member name="M:MessageMedia.Schedule.DailyRecurrence.ToString">
            <summary>
            Format the schedule into human readable format.
            </summary>
            <returns>The schedule description as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="P:MessageMedia.Schedule.DailyRecurrence.Days">
            <summary>
            Gets or sets the number of days that must pass before the message is resent.
            </summary>
        </member>
        <member name="T:MessageMedia.Schedule.WeekDayRecurrence">
            <summary>
            Messages of this recurrence type will be sent every weekday (not Saturday or Sunday).
            </summary>
        </member>
        <member name="M:MessageMedia.Schedule.WeekDayRecurrence.ToString">
            <summary>
            Format the schedule into human readable format.
            </summary>
            <returns>The schedule description as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:MessageMedia.Events.MessagingStatusEventArgs">
            <summary>
            Argument that is passed when the <see cref="T:MessageMedia.Events.MessagingStatusEventHandler"/> event handler is called.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.MessagingStatusEventArgs.Message">
            <summary>
            Gets the messaging status message.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.MessagingStatusEventArgs.Exception">
            <summary>
            Gets the exception that occurred to cause the messaging status to change
            (null if an exception was not the cause of the messaging status change).
            </summary>
        </member>
        <member name="T:MessageMedia.Events.MessagingStatusEventHandler">
            <summary>
            MessagingStatusEventHandler delegate called when the messaging status changes.
            </summary>
            <param name="sender">The <see cref="T:MessageMedia.Messaging"/> singleton object.</param>
            <param name="e">The <see cref="T:MessageMedia.Events.MessagingStatusEventArgs"/> containing the message.</param>
            <remarks>This event handler is called when any aspect of the messaging system changes
            (e.g. when the MessageMedia gateway is connected to, when a message is sent successfully, etc)
            and is used predominantly for logging.</remarks>
        </member>
        <member name="T:MessageMedia.Events.SendMessagesCompleteEventArgs">
            <summary>
            Argument that is passed when the <see cref="T:MessageMedia.Events.SendMessagesCompleteEventHandler"/> event handler is called.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.SendMessagesCompleteEventArgs.Messages">
            <summary>
            Gets the batch of messages that were sent to the gateway.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.SendMessagesCompleteEventArgs.Success">
            <summary>
            Gets whether the send messages action was successful.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.SendMessagesCompleteEventArgs.AccountUsed">
            <summary>
            Gets the account that was used to send the messages.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.SendMessagesCompleteEventArgs.Exception">
            <summary>
            Gets the messaging exception if one occurred (null if the action was successful).
            </summary>
        </member>
        <member name="T:MessageMedia.Events.SendMessagesCompleteEventHandler">
            <summary>
            SendMessagesCompleteEventHandler delegate called when messages are sent.
            </summary>
            <param name="sender">The <see cref="T:MessageMedia.Messaging"/> singleton object.</param>
            <param name="e">The <see cref="T:MessageMedia.Events.MessagingStatusEventArgs"/> containing the messages that were sent.</param>
        </member>
        <member name="T:MessageMedia.Events.CheckRepliesCompleteEventArgs">
            <summary>
            Argument that is passed when the <see cref="T:MessageMedia.Events.CheckRepliesCompleteEventHandler"/> event handler is called.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.CheckRepliesCompleteEventArgs.Messages">
            <summary>
            Gets the list of received reply messages that were downloaded from the gateway.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.CheckRepliesCompleteEventArgs.DeliveryReports">
            <summary>
            Gets the list of delivery reports that were downloaded from the gateway.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.CheckRepliesCompleteEventArgs.Success">
            <summary>
            Gets whether the check replies action was successful.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.CheckRepliesCompleteEventArgs.AccountUsed">
            <summary>
            Gets the account that was used when checking for replies.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.CheckRepliesCompleteEventArgs.Exception">
            <summary>
            Gets the messaging exception if one occurred (null if the action was successful).
            </summary>
        </member>
        <member name="T:MessageMedia.Events.CheckRepliesCompleteEventHandler">
            <summary>
            CheckRepliesCompleteEventHandler delegate called when messages are received.
            </summary>
            <param name="sender">The <see cref="T:MessageMedia.Messaging"/> singleton object.</param>
            <param name="e">The <see cref="T:MessageMedia.Events.CheckRepliesCompleteEventArgs"/> containing the messages that were receieved.</param>
        </member>
        <member name="T:MessageMedia.Events.CheckCreditCompleteEventArgs">
            <summary>
            Argument that is passed when the <see cref="T:MessageMedia.Events.CheckCreditCompleteEventHandler"/> event handler is called.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.CheckCreditCompleteEventArgs.Balance">
            <summary>
            Gets the account balance.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.CheckCreditCompleteEventArgs.Success">
            <summary>
            Gets whether the check credit action was successful.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.CheckCreditCompleteEventArgs.AccountUsed">
            <summary>
            Gets the account that was used when checking the credit balance.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.CheckCreditCompleteEventArgs.Exception">
            <summary>
            Gets the messaging exception if one occurred (null if the action was successful).
            </summary>
        </member>
        <member name="T:MessageMedia.Events.CheckCreditCompleteEventHandler">
            <summary>
            CheckCreditCompleteEventHandler delegate called when the remaining credit is updated.
            </summary>
            <param name="sender">The <see cref="T:MessageMedia.Messaging"/> singleton object.</param>
            <param name="e">The <see cref="T:MessageMedia.Events.CheckCreditCompleteEventArgs"/> containing the remaining balance of the account.</param>
        </member>
        <member name="T:MessageMedia.Events.UpdateUserDetailsCompleteEventArgs">
            <summary>
            Argument that is passed when the <see cref="T:MessageMedia.Events.UpdateUserDetailsCompleteEventHandler"/> event handler is called.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.UpdateUserDetailsCompleteEventArgs.Success">
            <summary>
            Gets whether the action was successful.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.UpdateUserDetailsCompleteEventArgs.AccountUsed">
            <summary>
            Gets the account that was used to update user details.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.UpdateUserDetailsCompleteEventArgs.Exception">
            <summary>
            Gets the messaging exception if one occurred (null if the action was successful).
            </summary>
        </member>
        <member name="T:MessageMedia.Events.UpdateUserDetailsCompleteEventHandler">
            <summary>
            UpdateUserDetailsCompleteEventHandler delegate called when the account details are updated.
            </summary>
            <param name="sender">The <see cref="T:MessageMedia.Messaging"/> singleton object.</param>
            <param name="e">The <see cref="T:MessageMedia.Events.UpdateUserDetailsCompleteEventArgs"/> containing the result of the update.</param>
        </member>
        <member name="T:MessageMedia.Events.ConfirmRepliesCompleteEventArgs">
            <summary>
            Argument that is passed when the <see cref="T:MessageMedia.Events.ConfirmRepliesCompleteEventHandler"/> event handler is called.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.ConfirmRepliesCompleteEventArgs.Success">
            <summary>
            Gets whether the action was successful.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.ConfirmRepliesCompleteEventArgs.AccountUsed">
            <summary>
            Gets the account that was used when confirming replies.
            </summary>
        </member>
        <member name="P:MessageMedia.Events.ConfirmRepliesCompleteEventArgs.Exception">
            <summary>
            Gets the messaging exception if one occurred (null if the action was successful).
            </summary>
        </member>
        <member name="T:MessageMedia.Events.ConfirmRepliesCompleteEventHandler">
            <summary>
            ConfirmRepliesCompleteEventHandler delegate that is called when replies have been confirmed on the gateway.
            </summary>
            <param name="sender">The <see cref="T:MessageMedia.Messaging"/> singleton object.</param>
            <param name="e">The <see cref="T:MessageMedia.Events.ConfirmRepliesCompleteEventArgs"/> containing the result of the action.</param>
        </member>
        <member name="T:MessageMedia.Events.ErrorThrownEventArgs">
            <summary>
            Argument that is passed when the <see cref="T:MessageMedia.Events.ErrorThrownEventHandler"/> event handler is called.
            </summary>
        </member>
        <member name="M:MessageMedia.Events.ErrorThrownEventArgs.#ctor(System.Exception)">
            <summary>
            Public constructor.
            </summary>
            <param name="ex">The exception that was thrown.</param>
        </member>
        <member name="P:MessageMedia.Events.ErrorThrownEventArgs.Ex">
            <summary>
            Gets the <see cref="T:System.Exception"/> object that was thrown.
            </summary>
        </member>
        <member name="T:MessageMedia.Events.ErrorThrownEventHandler">
            <summary>
            ErrorThrownEventHandler delegate that is called when an error exception is thrown.
            </summary>
            <param name="sender">The <see cref="T:MessageMedia.Messaging"/> singleton object.</param>
            <param name="e">The <see cref="T:MessageMedia.Events.ErrorThrownEventArgs"/> containing the exception that was thrown.</param>
        </member>
        <member name="M:MessageMedia.Gateway.ServerInfo.TimedOut">
            <summary>
            Call this when the gateway times out
            </summary>
        </member>
        <member name="M:MessageMedia.Gateway.ServerInfo.UseServer">
            <summary>
            Calculates whether this gateway is OK, or should be re-tried.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MessageMedia.Gateway.ServerInfo.Backup">
            <summary>
            Set to True if this is a backup gateway - will only be used if other servers are unavailable
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ServerInfo.LastResponseTime">
            <summary>
            The time taken for the last action to complete
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ServerInfo.LastSuccess">
            <summary>
            The last time the gateway was successful
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ServerInfo.LastTry">
            <summary>
            The last time the gateway was used
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ServerInfo.RetrySeconds">
            <summary>
            Time to wait before retrying failed gateway (defaults to 120 seconds)
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ServerInfo.Failcount">
            <summary>
            the number of times the gateway has failed since the last success
            </summary>
        </member>
        <member name="T:MessageMedia.Gateway.ASync.ASyncErrorEventArgs">
            <summary>
            Arguments that are passed when the ASync object raises an exception
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ASync.ASyncErrorEventArgs.Ex">
            <summary>
            The exception that was thrown during processing
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ASync.ASyncErrorEventArgs.Action">
            <summary>
            the action (if any) that caused the error
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ASync.ASyncCommand.Action">
            <summary>
            the action (if any) that this command represents
            </summary>
        </member>
        <member name="T:MessageMedia.Gateway.xml.Header`1">
            <summary>
            Generic XML Message Header class
            </summary>
            <typeparam name="ActionType">the Type of the action to perform</typeparam>
        </member>
        <member name="P:MessageMedia.Gateway.xml.Header`1.Account">
            <summary>
            The Account to use when accessing the Gateway
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.xml.Header`1.Action">
            <summary>
            The Action to perform on the Gateway
            </summary>
        </member>
        <member name="T:MessageMedia.UI.Editors.CountryConverter">
            <summary>
            Provides a type converter to convert <see cref="T:MessageMedia.Common.CountryDetails"/> objects to and from other representations.
            </summary>
        </member>
        <member name="M:MessageMedia.UI.Editors.CountryConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.</summary>
            <returns>true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> should be called to find a common set of values the object supports, false otherwise.</returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
        </member>
        <member name="M:MessageMedia.UI.Editors.CountryConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>Returns whether the collection of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exclusive list of possible values, using the specified context.</summary>
            <returns>true if the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exhaustive list of possible values; false if other values are possible.</returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
        </member>
        <member name="M:MessageMedia.UI.Editors.CountryConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.</summary>
            <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> that holds a standard set of valid values, or null if the data type does not support a standard set of values.</returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.</param>
        </member>
        <member name="M:MessageMedia.UI.Editors.CountryConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Gets a value indicating whether this converter can convert an object in the given source type to a string using the specified context.</summary>
            <returns>true if this converter can perform the conversion, false otherwise.</returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from.</param>
        </member>
        <member name="M:MessageMedia.UI.Editors.CountryConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Converts the specified value object to a <see cref="T:System.String"></see> object.</summary>
            <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use.</param>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <exception cref="T:System.NotSupportedException">The conversion could not be performed.</exception>
        </member>
        <member name="T:MessageMedia.ProxyDetails">
            <summary>
            This class contains details of the proxy gateway required to access the internet.
            </summary>
        </member>
        <member name="M:MessageMedia.ProxyDetails.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MessageMedia.ProxyDetails.Clone">
            <summary>
            Clones this <see cref="T:MessageMedia.ProxyDetails"/> instance.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:MessageMedia.ProxyDetails.GetProxy">
            <summary>
            Gets a <see cref="T:System.Net.WebProxy"/> object using the proxy settings held by this object.
            </summary>
            <returns>A <see cref="T:System.Net.WebProxy"/> object using the proxy settings held by this object, or null if an error occurs.</returns>
        </member>
        <member name="P:MessageMedia.ProxyDetails.UseProxy">
            <summary>
            Whether this connection requires a proxy gateway.
            </summary>
        </member>
        <member name="P:MessageMedia.ProxyDetails.HostName">
            <summary>
            The address of the proxy gateway (e.g. "proxy.yourcompany.com").
            </summary>
        </member>
        <member name="P:MessageMedia.ProxyDetails.Port">
            <summary>
            The port number that the proxy gateway listens to.
            </summary>
        </member>
        <member name="P:MessageMedia.ProxyDetails.UseDefaultCredentials">
            <summary>
            Whether to use the logged-on user's default credentials to access the proxy gateway.
            </summary>
        </member>
        <member name="P:MessageMedia.ProxyDetails.UserName">
            <summary>
            The username required to access the proxy gateway (leave blank to use default credentials).
            </summary>
        </member>
        <member name="P:MessageMedia.ProxyDetails.Password">
            <summary>
            The password required to access the proxy gateway (leave blank to use default credentials).
            </summary>
        </member>
        <member name="P:MessageMedia.ProxyDetails.Domain">
            <summary>
            The domain that the user belongs to.
            </summary>
        </member>
        <member name="T:MessageMedia.Gateway.xml.RepliesReturn">
            <summary>
            the return from the gateway when checking replies
            </summary>
        </member>
        <member name="M:MessageMedia.Gateway.xml.RepliesReturn.#ctor">
            <summary>
            default constructor for xml
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.xml.RepliesReturn.Replies">
            <summary>
            the list of replies
            </summary>
        </member>
        <member name="T:MessageMedia.Gateway.xml.Action">
            <summary>
            Base Class for all Gateway Actions
            </summary>
        </member>
        <member name="M:MessageMedia.Gateway.xml.Action.ExtraTypes(System.Boolean)">
            <summary>
            get the Extra types the xmlSerializer will need.
            </summary>
            <param name="forPost">true to get Post extra types, false for Return</param>
            <returns>array of Type objects</returns>
        </member>
        <member name="F:MessageMedia.Gateway.xml.Action.xmlDoc">
            <summary>
            the xmlDocument that is created from the gateway's response
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.xml.Action.ActionType">
            <summary>
            the Type of Action 
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.xml.Action.CommandName">
            <summary>
            The Command Type Identifyer
            </summary>
        </member>
        <member name="T:MessageMedia.SMS.SMSReply">
            <summary>
            Incoming SMS message class.
            </summary>
        </member>
        <member name="P:MessageMedia.SMS.SMSReply.MessageText">
            <summary>
            Gets or sets the text of the reply message.
            </summary>
        </member>
        <member name="T:MessageMedia.Diagnostics.DebugLogger">
            <summary>
            Logger class that outputs log information to the standard System.Diagnostics.Debug output.
            </summary>
        </member>
        <member name="T:MessageMedia.Diagnostics.Logger">
            <summary>
            Abstract base class for all logger types.
            </summary>
        </member>
        <member name="F:MessageMedia.Diagnostics.Logger.Verbosity">
            <summary>
            The verbosity level of the logger.
            </summary>
        </member>
        <member name="F:MessageMedia.Diagnostics.Logger.CreationStamp">
            <summary>
            Log creation stamp string.
            </summary>
        </member>
        <member name="M:MessageMedia.Diagnostics.Logger.WriteLine(MessageMedia.Diagnostics.LogEntryType,System.String)">
            <summary>
            Outputs a line of text to the log.
            </summary>
            <param name="Type">The log entry type.</param>
            <param name="Text">The text to output.</param>
        </member>
        <member name="M:MessageMedia.Diagnostics.Logger.WriteLine(MessageMedia.Diagnostics.LogEntryType,System.String,System.Object[])">
            <summary>
            Outputs a line of text to the log, using standard string format notation.
            </summary>
            <param name="Type">The log entry type.</param>
            <param name="Format">The log message text containing zero or more format items.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:MessageMedia.Diagnostics.Logger.WriteException(System.Exception)">
            <summary>
            Outputs exception details to the log.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> object to output.</param>
        </member>
        <member name="M:MessageMedia.Diagnostics.Logger.AddToMemoryLog(System.String)">
            <summary>
            Adds a line or text to an in-memory copy of the log.
            </summary>
            <param name="message">The message to add.</param>
        </member>
        <member name="M:MessageMedia.Diagnostics.Logger.GetLog">
            <summary>
            Retrieves the current log.
            </summary>
            <returns>The current log as a string.</returns>
        </member>
        <member name="M:MessageMedia.Diagnostics.Logger.GetLogs(System.Int32)">
            <summary>
            Retrieves the current log and the specified number of past logs.
            </summary>
            <param name="numberOfPastLogs">The number of past logs to retrieve.</param>
            <returns>The current log and the specified number of past logs as a string.</returns>
        </member>
        <member name="M:MessageMedia.Diagnostics.Logger.CreateLogger(MessageMedia.Diagnostics.LogType,System.String)">
            <summary>
            Static function to create a new <see cref="T:MessageMedia.Diagnostics.Logger"/> object.
            </summary>
            <param name="Type">The type of logger to create.</param>
            <param name="Settings">The settings string.</param>
            <returns>A new logger object of the specified type.</returns>
        </member>
        <member name="E:MessageMedia.Diagnostics.Logger.MessageLogged">
            <summary>
            Event handler called when the logger writes to the log.
            </summary>
        </member>
        <member name="P:MessageMedia.Diagnostics.Logger.Type">
            <summary>
            Gets the <see cref="T:MessageMedia.Diagnostics.LogType"/> of this instance.
            </summary>
            <returns>The <see cref="T:MessageMedia.Diagnostics.LogType"/> of this instance.</returns>
        </member>
        <member name="P:MessageMedia.Diagnostics.Logger.Settings">
            <summary>
            Gets any log settings in a concatenated string format.
            </summary>
            <returns>The log settings in a concatenated string format.</returns>
        </member>
        <member name="P:MessageMedia.Diagnostics.Logger.ApplicationName">
            <summary>
            Gets or sets the name of the application to include in the log, if required.
            </summary>
        </member>
        <member name="M:MessageMedia.Diagnostics.DebugLogger.#ctor">
            <summary>
            Paramaterless constructor for XML.
            </summary>
        </member>
        <member name="M:MessageMedia.Diagnostics.DebugLogger.WriteLine(MessageMedia.Diagnostics.LogEntryType,System.String)">
            <summary>
            Outputs a line of text to the log.
            </summary>
            <param name="Type">The log entry type.</param>
            <param name="Text">The text to output.</param>
        </member>
        <member name="M:MessageMedia.Diagnostics.DebugLogger.WriteLine(MessageMedia.Diagnostics.LogEntryType,System.String,System.Object[])">
            <summary>
            Outputs a line of text to the log, using standard string format notation.
            </summary>
            <param name="Type">The log entry type.</param>
            <param name="Format">A log message text containing zero or more format items.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:MessageMedia.Diagnostics.DebugLogger.WriteException(System.Exception)">
            <summary>
            Outputs exception details to the log.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> object to output.</param>
        </member>
        <member name="P:MessageMedia.Diagnostics.DebugLogger.Type">
            <summary>
            Gets the <see cref="T:MessageMedia.Diagnostics.LogType"/> of this instance.
            </summary>
            <returns>The <see cref="T:MessageMedia.Diagnostics.LogType"/> of this instance.</returns>
        </member>
        <member name="P:MessageMedia.Diagnostics.DebugLogger.Settings">
            <summary>
            Gets any log settings in a concatenated string format.
            </summary>
            <returns>The log settings in a concatenated string format.</returns>
        </member>
        <member name="T:MessageMedia.Gateway.ActionTypes">
            <summary>
            Specifies the type of action that an asyncronous process is performing.
            </summary>
        </member>
        <member name="F:MessageMedia.Gateway.ActionTypes.NotSpecified">
            <summary>
            Action is unknown or not specified.
            </summary>
        </member>
        <member name="F:MessageMedia.Gateway.ActionTypes.ChangePassword">
            <summary>
            ChangePassword action.
            </summary>
        </member>
        <member name="F:MessageMedia.Gateway.ActionTypes.CheckConnection">
            <summary>
            CheckConnection action.
            </summary>
        </member>
        <member name="F:MessageMedia.Gateway.ActionTypes.CheckCredit">
            <summary>
            CheckCredit action.
            </summary>
        </member>
        <member name="F:MessageMedia.Gateway.ActionTypes.CheckReplies">
            <summary>
            CheckReplies action.
            </summary>
        </member>
        <member name="F:MessageMedia.Gateway.ActionTypes.ConfirmReplies">
            <summary>
            ConfirmReplies action.
            </summary>
        </member>
        <member name="F:MessageMedia.Gateway.ActionTypes.SendMessages">
            <summary>
            SendMessages action.
            </summary>
        </member>
        <member name="F:MessageMedia.Gateway.ActionTypes.UpdateDetails">
            <summary>
            UpdateDetails action.
            </summary>
        </member>
        <member name="F:MessageMedia.Gateway.ActionTypes.Waiting">
            <summary>
            Waiting action.
            </summary>
        </member>
        <member name="F:MessageMedia.Gateway.ActionTypes.HttpGet">
            <summary>
            HttpGet action.
            </summary>
        </member>
        <member name="T:MessageMedia.Exceptions.ExceptionCodes">
            <summary>
            Exception codes used to identify messaging exceptions.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.MessagingServerNotFound">
            <summary>
            The list of messaging servers is invalid.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.LoginError">
            <summary>
            A blank username or password was supplied.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.PhoneNumberError">
            <summary>
            Invalid phone number supplied.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.EmptyMessage">
            <summary>
            No message text supplied.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.MessageTooLong">
            <summary>
            Message provided is too long.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.NoNewPassword">
            <summary>
            No new password supplied.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.NoSenderName">
            <summary>
            No sender name supplied.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.InvalidMessageId">
            <summary>
            Invalid Message ID supplied.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.NoReplyFile">
            <summary>
            No reply filename supplied.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.BatchFull">
            <summary>
            The messages batch is already full.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.CheckReplyDenied">
            <summary>
            Check reply denied, please wait before requesting again.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.LibraryNotFound">
            <summary>
            Required library is either not found or not properly registered.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.InternetError">
            <summary>
            Failed to send through the internet, please check the internet connection.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.InvalidResponse">
            <summary>
            Invalid response received, please check your firewall/proxy setting.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.SendTimeOut">
            <summary>
            Timed out while trying to send.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.ServerDown">
            <summary>
            All MessageMedia servers are currently down, please call MessageMedia to let us know.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.NoInternet">
            <summary>
            No internet connection is present.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.InvalidUserPass">
            <summary>
            An invalid Uuername or password was supplied.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.InsufficientDailyCredit">
            <summary>
            Insufficient daily credit limit to send the last messages batch.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.InsufficientCredit">
            <summary>
            Insufficient credit to send the last messages batch.
            </summary>
        </member>
        <member name="F:MessageMedia.Exceptions.ExceptionCodes.UnrecognizedError">
            <summary>
            Unhandled or unrecognized errors.
            </summary>
        </member>
        <member name="T:MessageMedia.Exceptions.MessagingException">
            <summary>
            Abstract base class for all the messaging exceptions.
            </summary>
        </member>
        <member name="M:MessageMedia.Exceptions.MessagingException.#ctor(System.String,MessageMedia.Exceptions.ExceptionCodes)">
            <summary>
            The constructor.
            </summary>
            <param name="Message">String containing a description of the error.</param>
            <param name="Code">Exception code value.</param>
        </member>
        <member name="M:MessageMedia.Exceptions.MessagingException.#ctor(System.String,MessageMedia.Gateway.ActionTypes,MessageMedia.Exceptions.ExceptionCodes)">
            <summary>
            The constructor. This constructor allows for the error action to be specified.
            </summary>
            <param name="Message">String containing a description of the error.</param>
            <param name="action">The action that caused the exception.</param>
            <param name="Code">Exception code value.</param>
        </member>
        <member name="P:MessageMedia.Exceptions.MessagingException.Code">
            <summary>
            Gets the exception code for this error.
            </summary>
        </member>
        <member name="P:MessageMedia.Exceptions.MessagingException.ActionType">
            <summary>
            Gets or sets the action that was being performed when the error occurred.
            </summary>
        </member>
        <member name="T:MessageMedia.Exceptions.MessagingServerNotFoundException">
            <summary>		
            Exception thrown when the list of messaging servers is invalid.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.MessagingServerNotFoundException.#ctor">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.MessagingServerNotFoundException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="T:MessageMedia.Exceptions.LoginErrorException">
            <summary>		
            Exception thrown when a blank username or password is supplied.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.LoginErrorException.#ctor">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.LoginErrorException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="T:MessageMedia.Exceptions.PhoneNumberErrorException">
            <summary>		
            Exception thrown when an invalid phone number supplied.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.PhoneNumberErrorException.#ctor">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.PhoneNumberErrorException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="T:MessageMedia.Exceptions.EmptyMessageException">
            <summary>		
            Exception thrown when no message text is supplied.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.EmptyMessageException.#ctor">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.EmptyMessageException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>	
        </member>
        <member name="T:MessageMedia.Exceptions.MessageTooLongException">
            <summary>		
            Exception thrown when the message provided is too long.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.MessageTooLongException.#ctor">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.MessageTooLongException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="T:MessageMedia.Exceptions.NoNewPasswordException">
            <summary>		
            Exception thrown when no new password is supplied.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.NoNewPasswordException.#ctor">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.NoNewPasswordException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="T:MessageMedia.Exceptions.NoSenderNameException">
            <summary>		
            Exception thrown when no sender name is supplied.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.NoSenderNameException.#ctor">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.NoSenderNameException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="T:MessageMedia.Exceptions.InvalidMessageIdException">
            <summary>		
            Exception thrown when an invalid Message ID is supplied.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.InvalidMessageIdException.#ctor(System.Int32)">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.InvalidMessageIdException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="T:MessageMedia.Exceptions.NoReplyFileException">
            <summary>		
            Exception thrown when no reply filename is supplied.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.NoReplyFileException.#ctor">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.NoReplyFileException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="T:MessageMedia.Exceptions.BatchFullException">
            <summary>		
            Exception thrown when the messages batch is already full.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.BatchFullException.#ctor">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.BatchFullException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="T:MessageMedia.Exceptions.CheckReplyDeniedException">
            <summary>		
            Exception thrown when check reply is denied.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.CheckReplyDeniedException.#ctor">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.CheckReplyDeniedException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="T:MessageMedia.Exceptions.LibraryNotFoundException">
            <summary>		
            Exception thrown when a required library is either not found or not properly registered.	
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.LibraryNotFoundException.#ctor">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.LibraryNotFoundException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="T:MessageMedia.Exceptions.InternetErrorException">
            <summary>		
            Exception thrown when a message failed to send through the internet.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.InternetErrorException.#ctor">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.InternetErrorException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="T:MessageMedia.Exceptions.InvalidResponseException">
            <summary>		
            Exception thrown when an invalid response is received.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.InvalidResponseException.#ctor">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.InvalidResponseException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="T:MessageMedia.Exceptions.SendTimeOutException">
            <summary>		
            Exception thrown when a time-out occurs during sending.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.SendTimeOutException.#ctor">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.SendTimeOutException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="T:MessageMedia.Exceptions.ServerDownException">
            <summary>		
            Exception thrown when all of the MessageMedia servers are unavailable.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.ServerDownException.#ctor">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.ServerDownException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="T:MessageMedia.Exceptions.NoInternetException">
            <summary>		
            Exception thrown when no internet connection is present.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.NoInternetException.#ctor">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.NoInternetException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="T:MessageMedia.Exceptions.InvalidUserPassException">
            <summary>		
            Exception thrown when an invalid username or password is supplied.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.InvalidUserPassException.#ctor">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.InvalidUserPassException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="T:MessageMedia.Exceptions.InsufficientDailyCreditException">
            <summary>		
            Exception thrown when there is insufficient daily credit to send the last batch of messages.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.InsufficientDailyCreditException.#ctor">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.InsufficientDailyCreditException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="T:MessageMedia.Exceptions.InsufficientCreditException">
            <summary>		
            Exception thrown when there is insufficient credit to send the last batch of messages.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.InsufficientCreditException.#ctor">
            <summary>	
            Default constructor.
            </summary>	
        </member>
        <member name="M:MessageMedia.Exceptions.InsufficientCreditException.#ctor(System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="T:MessageMedia.Exceptions.UnrecognizedErrorException">
            <summary>		
            Exception thrown when an unrecognised error occurs.
            </summary>		
        </member>
        <member name="M:MessageMedia.Exceptions.UnrecognizedErrorException.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="posted">Whether the 'POST' completed before the error.</param>
        </member>
        <member name="M:MessageMedia.Exceptions.UnrecognizedErrorException.#ctor(System.Boolean,MessageMedia.Gateway.ActionTypes)">
            <summary>
            Constructor.
            </summary>
            <param name="posted">Whether the 'POST' completed before the error.</param>
            <param name="action">The action that caused the error.</param>
        </member>
        <member name="M:MessageMedia.Exceptions.UnrecognizedErrorException.#ctor(System.Boolean,MessageMedia.Gateway.ActionTypes,System.String)">
            <summary>
            Constructor that allows message customisation.
            </summary>
            <param name="posted">Whether the 'POST' completed before the error.</param>
            <param name="action">The action that caused the error.</param>
            <param name="Message">String containing a description of the error.</param>
        </member>
        <member name="P:MessageMedia.Exceptions.UnrecognizedErrorException.Posted">
            <summary>
            Gets or sets whether the 'POST' completed before the error.
            </summary>
        </member>
        <member name="T:MessageMedia.Schedule.TimeValue">
            <summary>
            Class that represents the time of day, in hours and minutes only.
            </summary>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.#ctor(System.TimeSpan)">
            <summary>
            Constructs a new <see cref="T:MessageMedia.Schedule.TimeValue"/> object from a <see cref="T:System.TimeSpan"/> object.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> object to get hours and minutes from.</param>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.#ctor(System.DateTime)">
            <summary>
            Constructs a new <see cref="T:MessageMedia.Schedule.TimeValue"/> object from a <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> object to get hours and minutes from.</param>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:MessageMedia.Schedule.TimeValue"/> object from a string representation of the time.
            </summary>
            <param name="time">String representation of time (eg "1:15 pm", or "14:00").</param>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new <see cref="T:MessageMedia.Schedule.TimeValue"/> object by specifying the hour and minute values.
            </summary>
            <param name="hour">The hour in 24 hour format (e.g. 2pm = 14).</param>
            <param name="minute">The number of minutes past the hour.</param>
            <remarks>The <paramref name="hour"/> wraps around if it is greater than 23. So 24 = 0, 25 = 1, and so on.
            The <paramref name="minute"/> wraps around as well, for example 127 minutes = 2 hours 7 minutes.</remarks>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.#ctor(System.Int32)">
            <summary>
            Constructs a new <see cref="T:MessageMedia.Schedule.TimeValue"/> object by specifying the number of minutes after midnight.
            </summary>
            <param name="MinutesAfterMidnight">The number of minutes past midnight (e.g. 180 minutes = 3am).</param>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.op_Implicit(System.TimeSpan)~MessageMedia.Schedule.TimeValue">
            <summary>
            Creates a new <see cref="T:MessageMedia.Schedule.TimeValue"/> object from a <see cref="T:System.TimeSpan"/> object.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> object to get hours and minutes from.</param>
            <returns>A newly constructed <see cref="T:MessageMedia.Schedule.TimeValue"/> object.</returns>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.op_Implicit(System.DateTime)~MessageMedia.Schedule.TimeValue">
            <summary>
            Creates a new <see cref="T:MessageMedia.Schedule.TimeValue"/> object from a <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> object to get hours and minutes from.</param>
            <returns>A newly constructed <see cref="T:MessageMedia.Schedule.TimeValue"/> object.</returns>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.op_Implicit(System.String)~MessageMedia.Schedule.TimeValue">
            <summary>
            Creates a new <see cref="T:MessageMedia.Schedule.TimeValue"/> object from a string representation of the time.
            </summary>
            <param name="value">String representation of time (eg "1:15 pm", or "14:00").</param>
            <returns>A newly constructed <see cref="T:MessageMedia.Schedule.TimeValue"/> object.</returns>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.op_Implicit(MessageMedia.Schedule.TimeValue)~System.DateTime">
            <summary>
            Converts a <see cref="T:MessageMedia.Schedule.TimeValue"/> to a <see cref="T:System.DateTime"/> object. 
            </summary>
            <param name="value">The <see cref="T:MessageMedia.Schedule.TimeValue"/> object to convert.</param>
            <returns>A <see cref="T:System.DateTime"/> value representing the same time as <paramref name="value"/>.</returns>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.op_Implicit(MessageMedia.Schedule.TimeValue)~System.TimeSpan">
            <summary>
            Converts a <see cref="T:MessageMedia.Schedule.TimeValue"/> to a <see cref="T:System.TimeSpan"/> object. 
            </summary>
            <param name="value">The <see cref="T:MessageMedia.Schedule.TimeValue"/> object to convert.</param>
            <returns>A <see cref="T:System.TimeSpan"/> value representing the same time as <paramref name="value"/>.</returns>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.op_LessThan(MessageMedia.Schedule.TimeValue,MessageMedia.Schedule.TimeValue)">
            <summary>
            Compares two <see cref="T:MessageMedia.Schedule.TimeValue"/> objects.
            </summary>
            <param name="t1">LHS.</param>
            <param name="t2">RHS.</param>
            <returns>True if LHS is less than RHS, false otherwise.</returns>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.op_GreaterThan(MessageMedia.Schedule.TimeValue,MessageMedia.Schedule.TimeValue)">
            <summary>
            Compares two <see cref="T:MessageMedia.Schedule.TimeValue"/> objects.
            </summary>
            <param name="t1">LHS.</param>
            <param name="t2">RHS.</param>
            <returns>True if LHS is greater than RHS, false otherwise.</returns>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.op_LessThanOrEqual(MessageMedia.Schedule.TimeValue,MessageMedia.Schedule.TimeValue)">
            <summary>
            Compares two <see cref="T:MessageMedia.Schedule.TimeValue"/> objects.
            </summary>
            <param name="t1">LHS.</param>
            <param name="t2">RHS.</param>
            <returns>True if LHS is less than or equal to RHS, false otherwise.</returns>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.op_GreaterThanOrEqual(MessageMedia.Schedule.TimeValue,MessageMedia.Schedule.TimeValue)">
            <summary>
            Compares two <see cref="T:MessageMedia.Schedule.TimeValue"/> objects.
            </summary>
            <param name="t1">LHS.</param>
            <param name="t2">RHS.</param>
            <returns>True if LHS is greater than or equal to RHS, false otherwise.</returns>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.op_Equality(MessageMedia.Schedule.TimeValue,MessageMedia.Schedule.TimeValue)">
            <summary>
            Compares two <see cref="T:MessageMedia.Schedule.TimeValue"/> objects.
            </summary>
            <param name="t1">LHS.</param>
            <param name="t2">RHS.</param>
            <returns>True if LHS is equal to RHS, false otherwise.</returns>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.op_Inequality(MessageMedia.Schedule.TimeValue,MessageMedia.Schedule.TimeValue)">
            <summary>
            Compares two <see cref="T:MessageMedia.Schedule.TimeValue"/> objects.
            </summary>
            <param name="t1">LHS.</param>
            <param name="t2">RHS.</param>
            <returns>True if LHS is not equal to RHS, false otherwise.</returns>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.op_Addition(MessageMedia.Schedule.TimeValue,MessageMedia.Schedule.TimeValue)">
            <summary>
            Adds two <see cref="T:MessageMedia.Schedule.TimeValue"/> objects.
            </summary>
            <param name="t1">LHS.</param>
            <param name="t2">RHS.</param>
            <returns>The result of the addition as a new <see cref="T:MessageMedia.Schedule.TimeValue"/> object.</returns>
            <remarks>If the result is greater than or equal to 24 hours the result will wrap around. For example, 11:45pm + 2:00am = 1:45am.</remarks>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.op_Addition(MessageMedia.Schedule.TimeValue,System.TimeSpan)">
            <summary>
            Adds a <see cref="T:System.TimeSpan"/> object to a <see cref="T:MessageMedia.Schedule.TimeValue"/> object.
            </summary>
            <param name="t1">LHS.</param>
            <param name="t2">RHS.</param>
            <returns>The result of the addition as a new <see cref="T:MessageMedia.Schedule.TimeValue"/> object.</returns>
            <remarks>If the result is greater than or equal to 24 hours the result will wrap around. For example, 11:45pm + 2:00am = 1:45am.</remarks>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.op_Addition(System.DateTime,MessageMedia.Schedule.TimeValue)">
            <summary>
            Creates a new <see cref="T:System.DateTime"/> object with the original date values,
            but with the time set to the value held by <paramref name="tv"/>.
            </summary>
            <param name="dt">A <see cref="T:System.DateTime"/> object.</param>
            <param name="tv">A <see cref="T:MessageMedia.Schedule.TimeValue"/> object.</param>
            <returns>The result of the addition as a new <see cref="T:System.DateTime"/> object.</returns>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.op_Addition(MessageMedia.Schedule.TimeValue,System.DateTime)">
            <summary>
            Creates a new <see cref="T:System.DateTime"/> object with the original date values,
            but with the time set to the value held by <paramref name="tv"/>.
            </summary>
            <param name="tv">A <see cref="T:MessageMedia.Schedule.TimeValue"/> object.</param>
            <param name="dt">A <see cref="T:System.DateTime"/> object.</param>        
            <returns>The result of the addition as a new <see cref="T:System.DateTime"/> object.</returns>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.GetHashCode">
            <summary>
            Gets the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.Equals(System.Object)">
            <summary>
            Checks whether this instance and the specified object are equal in value.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>True if <paramref name="obj"/> and this instance are of the same type and represent the same value.</returns>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.Equals(MessageMedia.Schedule.TimeValue)">
            <summary>
            Checks whether this instance and the specified <see cref="T:MessageMedia.Schedule.TimeValue"/> object are equal in value.
            </summary>
            <param name="time">Another <see cref="T:MessageMedia.Schedule.TimeValue"/> to compare to.</param>
            <returns>True if <paramref name="time"/> and this instance represent the same value.</returns>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.op_Explicit(MessageMedia.Schedule.TimeValue)~System.Int32">
            <summary>
            Converts the specified <see cref="T:MessageMedia.Schedule.TimeValue"/> object to an integer.
            </summary>
            <param name="time">The time value to convert.</param>
            <returns>The total number of minutes after midnight.</returns>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.op_Implicit(MessageMedia.Schedule.TimeValue)~System.String">
            <summary>
            Formats the specified <see cref="T:MessageMedia.Schedule.TimeValue"/> object into a string of the form "hh:mm tt", where tt = "AM" or "PM".
            </summary>
            <param name="time">The time value to format into a string.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.ToString">
            <summary>
            Gets a string representation of this instance of the form "hh:mm tt", where tt = "AM" or "PM".
            </summary>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:MessageMedia.Schedule.TimeValue.CompareTo(MessageMedia.Schedule.TimeValue)">
            <summary>
            Compares this instance to another <see cref="T:MessageMedia.Schedule.TimeValue"/> object.
            </summary>
            <param name="other">The other <see cref="T:MessageMedia.Schedule.TimeValue"/> object to compare to.</param>
            <returns>An integer less than zero if this instance is less than <paramref name="other"/>.
            Zero, if this instance is equal to <paramref name="other"/>. Greater than zero, if this
            instance is greater than <paramref name="other"/>.</returns>
        </member>
        <member name="P:MessageMedia.Schedule.TimeValue.AMorPM">
            <summary>
            Gets or sets whether the time value is in the morning (AM) or afternoon (PM).
            </summary>
        </member>
        <member name="P:MessageMedia.Schedule.TimeValue.Now">
            <summary>
            Gets a new <see cref="T:MessageMedia.Schedule.TimeValue"/> object set to the current system time.
            </summary>
        </member>
        <member name="P:MessageMedia.Schedule.TimeValue.NextHalfHour">
            <summary>
            Gets a new <see cref="T:MessageMedia.Schedule.TimeValue"/> object set to the current system time rounded up to the next 30 minutes.
            </summary>
        </member>
        <member name="P:MessageMedia.Schedule.TimeValue.NextQtrHour">
            <summary>
            Gets a new <see cref="T:MessageMedia.Schedule.TimeValue"/> object set to the current system time rounded up to the next 15 minutes.
            </summary>
        </member>
        <member name="T:MessageMedia.Schedule.TimeValue.AMPM">
            <summary>
            Time is morning (AM) or afternoon (PM).
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.TimeValue.AMPM.AM">
            <summary>
            Morning (Midnight to 11:59)
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.TimeValue.AMPM.PM">
            <summary>
            Afternoon (Midday to 11:59)
            </summary>
        </member>
        <member name="T:MessageMedia.Diagnostics.LogType">
            <summary>
            The type of debugging log to create, if any.
            </summary>
        </member>
        <member name="F:MessageMedia.Diagnostics.LogType.None">
            <summary>
            No log will be created.
            </summary>
        </member>
        <member name="F:MessageMedia.Diagnostics.LogType.DebugWindow">
            <summary>
            Logging information will be output to the standard System.Diagnostics.Debug object.
            </summary>
        </member>
        <member name="F:MessageMedia.Diagnostics.LogType.TextFile">
            <summary>
            Logging information will be output to a specified text file.
            </summary>
        </member>
        <member name="F:MessageMedia.Diagnostics.LogType.EventLog">
            <summary>
            Logging information will be output to the event log.
            </summary>
        </member>
        <member name="F:MessageMedia.Diagnostics.LogType.Web">
            <summary>
            Logging information will be output to a specified URL.
            </summary>
        </member>
        <member name="T:MessageMedia.Diagnostics.LogVerbosity">
            <summary>
            The level of logging to provide.
            </summary>
        </member>
        <member name="F:MessageMedia.Diagnostics.LogVerbosity.None">
            <summary>
            No messages will be output to the log.
            </summary>
        </member>
        <member name="F:MessageMedia.Diagnostics.LogVerbosity.Minimal">
            <summary>
            Only exceptions and errors will be output to the log.
            </summary>
        </member>
        <member name="F:MessageMedia.Diagnostics.LogVerbosity.Medium">
            <summary>
            Exceptions, errors and diagnostic information will be output to the log.
            </summary>
        </member>
        <member name="F:MessageMedia.Diagnostics.LogVerbosity.Maximum">
            <summary>
            All messages will be output to the log.
            </summary>
        </member>
        <member name="T:MessageMedia.Diagnostics.LogEntryType">
            <summary>
            The type of message to Log
            </summary>
        </member>
        <member name="F:MessageMedia.Diagnostics.LogEntryType.Error">
            <summary>
            Report of an error.
            </summary>
        </member>
        <member name="F:MessageMedia.Diagnostics.LogEntryType.Info">
            <summary>
            Diagnostic information.
            </summary>
        </member>
        <member name="F:MessageMedia.Diagnostics.LogEntryType.Extra">
            <summary>
            Additional information.
            </summary>
        </member>
        <member name="T:MessageMedia.Diagnostics.NoLogger">
            <summary>
            Default logger object that does not do any logging.
            </summary>
        </member>
        <member name="M:MessageMedia.Diagnostics.NoLogger.WriteLine(MessageMedia.Diagnostics.LogEntryType,System.String)">
            <summary>
            Adds the message to the memory log and raises the <see cref="E:MessageMedia.Diagnostics:Logger.MessageLogged"/> event.
            </summary>
            <param name="Type">The log entry type.</param>
            <param name="Text">The log message text.</param>
        </member>
        <member name="M:MessageMedia.Diagnostics.NoLogger.WriteLine(MessageMedia.Diagnostics.LogEntryType,System.String,System.Object[])">
            <summary>
            Adds a formatted message to the memory log and raises the <see cref="E:MessageMedia.Diagnostics:Logger.MessageLogged"/> event.
            </summary>
            <param name="Type">The log entry type.</param>
            <param name="Format">A log message text containing zero or more format items.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:MessageMedia.Diagnostics.NoLogger.WriteException(System.Exception)">
            <summary>
            Outputs exception details to the memory log and raises the <see cref="E:MessageMedia.Diagnostics:Logger.MessageLogged"/> event.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> object to output.</param>
        </member>
        <member name="P:MessageMedia.Diagnostics.NoLogger.Type">
            <summary>
            Gets the <see cref="T:MessageMedia.Diagnostics.LogType"/> of this instance.
            </summary>
            <returns>The <see cref="T:MessageMedia.Diagnostics.LogType"/> of this instance.</returns>
        </member>
        <member name="P:MessageMedia.Diagnostics.NoLogger.Settings">
            <summary>
            Gets any log settings in a concatenated string format.
            </summary>
            <returns>The log settings in a concatenated string format.</returns>
        </member>
        <member name="T:MessageMedia.Diagnostics.LoggerEventArgs">
            <summary>
            Arguments that are passed when the logger raises the <see cref="E:MessageMedia.Diagnostics:Logger.MessageLogged"/> event.
            </summary>
        </member>
        <member name="P:MessageMedia.Diagnostics.LoggerEventArgs.Message">
            <summary>
            Gets or sets the log message.
            </summary>
        </member>
        <member name="T:MessageMedia.Diagnostics.LoggerEventHandler">
            <summary>
            Logger event handler delegate.
            </summary>
            <param name="sender">The <see cref="T:MessageMedia.Diagnostics.Logger"/> that logged the message.</param>
            <param name="e">The <see cref="T:MessageMedia.Diagnostics.LoggerEventArgs"/> containing the message that was logged.</param>
        </member>
        <member name="T:MessageMedia.Schedule.DaySequence">
            <summary>
            The sequence of days in the month.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.DaySequence.First">
            <summary>
            First.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.DaySequence.Second">
            <summary>
            Second.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.DaySequence.Third">
            <summary>
            Third.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.DaySequence.Fourth">
            <summary>
            Fourth.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.DaySequence.Fifth">
            <summary>
            Fifth.
            </summary>
        </member>
        <member name="T:MessageMedia.Schedule.DayOfWeek">
            <summary>
            The day of the week.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.DayOfWeek.Monday">
            <summary>
            Monday.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.DayOfWeek.Tuesday">
            <summary>
            Tuesday.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.DayOfWeek.Wednesday">
            <summary>
            Wednesday.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.DayOfWeek.Thursday">
            <summary>
            Thursday.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.DayOfWeek.Friday">
            <summary>
            Friday.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.DayOfWeek.Saturday">
            <summary>
            Saturday.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.DayOfWeek.Sunday">
            <summary>
            Sunday.
            </summary>
        </member>
        <member name="T:MessageMedia.Schedule.DaysOfWeekMask">
            <summary>
            Bitmask of days to send recurring message on.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.DaysOfWeekMask.Monday">
            <summary>
            Monday.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.DaysOfWeekMask.Tuesday">
            <summary>
            Tuesday.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.DaysOfWeekMask.Wednesday">
            <summary>
            Wednesday.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.DaysOfWeekMask.Thursday">
            <summary>
            Thursday.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.DaysOfWeekMask.Friday">
            <summary>
            Friday.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.DaysOfWeekMask.Saturday">
            <summary>
            Saturday.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.DaysOfWeekMask.Sunday">
            <summary>
            Sunday.
            </summary>
        </member>
        <member name="T:MessageMedia.Schedule.MonthOfYear">
            <summary>
            The month of the year.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.MonthOfYear.January">
            <summary>
            January.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.MonthOfYear.February">
            <summary>
            February.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.MonthOfYear.March">
            <summary>
            March.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.MonthOfYear.April">
            <summary>
            April.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.MonthOfYear.May">
            <summary>
            May.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.MonthOfYear.June">
            <summary>
            June.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.MonthOfYear.July">
            <summary>
            July.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.MonthOfYear.August">
            <summary>
            August.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.MonthOfYear.September">
            <summary>
            September.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.MonthOfYear.October">
            <summary>
            October.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.MonthOfYear.November">
            <summary>
            November.
            </summary>
        </member>
        <member name="F:MessageMedia.Schedule.MonthOfYear.December">
            <summary>
            December.
            </summary>
        </member>
        <member name="T:MessageMedia.Common.MessageSendStatus">
            <summary>
            The status of an outgoing message.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.MessageSendStatus.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.MessageSendStatus.NewMessage">
            <summary>
            New Message created, but not queued.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.MessageSendStatus.ReadyToSend">
            <summary>
            Message is ready to send.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.MessageSendStatus.Batched">
            <summary>
            Message is batched is is currently being processed for sending.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.MessageSendStatus.Sent">
            <summary>
            Message has been sent to the gateway.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.MessageSendStatus.SendFailed">
            <summary>
            Sending has been attempted but failed.
            </summary>
        </member>
        <member name="T:MessageMedia.Common.MessageDeliveryStatus">
            <summary>
            The delivery status of an outgoing message.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.MessageDeliveryStatus.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.MessageDeliveryStatus.None">
            <summary>
            Not Applicable.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.MessageDeliveryStatus.Pending">
            <summary>
            Message has been sent, awaiting report.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.MessageDeliveryStatus.Delivered">
            <summary>
            The message has been successfully delivered to the recipient.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.MessageDeliveryStatus.Failed">
            <summary>
            There was a problem sending the message.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.MessageDeliveryStatus.Scheduled">
            <summary>
            Message has been scheduled on the gateway.
            </summary>
        </member>
        <member name="T:MessageMedia.Common.ValidPeriod">
            <summary>
            The validity period for a message within the mobile network.
            Once sent, the mobile network will continue to attempt delivery
            until the validity period has expired.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.ValidPeriod.Default">
            <summary>
            The default message validity is 2 days.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.ValidPeriod.Minimum">
            <summary>
            The minimum message validity is 5 minutes.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.ValidPeriod.OneHour">
            <summary>
            Message will remain valid for 1 hour.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.ValidPeriod.SixHours">
            <summary>
            Message will remain valid for 6 hours.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.ValidPeriod.OneDay">
            <summary>
            Message will remain valid for 1 day.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.ValidPeriod.ThreeDays">
            <summary>
            Message will remain valid for 3 days.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.ValidPeriod.OneWeek">
            <summary>
            Message will remain valid for 1 week.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.ValidPeriod.Maximum">
            <summary>
            The maximum message validity is 63 weeks.
            </summary>
        </member>
        <member name="T:MessageMedia.Common.PhoneNumberValidity">
            <summary>
            Describes the validity of a phone number and whether it is a mobile or a landline number.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.PhoneNumberValidity.Invalid">
            <summary>
            Number is invalid.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.PhoneNumberValidity.Mobile">
            <summary>
            Number is a mobile phone.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.PhoneNumberValidity.Landline">
            <summary>
            Number is a landLine.
            </summary>
        </member>
        <member name="F:MessageMedia.Common.PhoneNumberValidity.Either">
            <summary>
            Number is valid as both mobile and landline
            </summary>
        </member>
        <member name="F:MessageMedia.Common.PhoneNumberValidity.ServiceNo">
            <summary>
            Number is valid for this country but should not be sent (e.g. service number, toll number, etc).
            </summary>
        </member>
        <member name="T:MessageMedia.Gateway.xml.SendMessagesAction">
            <summary>
            Action to send messages
            </summary>
        </member>
        <member name="M:MessageMedia.Gateway.xml.SendMessagesAction.#ctor">
            <summary>
            default constructor (used for serialization)
            </summary>
        </member>
        <member name="M:MessageMedia.Gateway.xml.SendMessagesAction.#ctor(MessageMedia.Common.MessageQueue)">
            <summary>
            constructor that passes the messages to send
            </summary>
            <param name="Messages"></param>
        </member>
        <member name="M:MessageMedia.Gateway.xml.SendMessagesAction.GetPost(MessageMedia.Account)">
            <summary>
            Prepares the POST string to perform a Send Message action
            </summary>
            <param name="account">The Account object to use for Username and Password, etc</param>
            <returns>POST string</returns>
            <exception cref="T:MessageMedia.Exceptions.InvalidUserPassException"></exception>
        </member>
        <member name="P:MessageMedia.Gateway.xml.SendMessagesAction.ActionType">
            <summary>
            the Type of Action 
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.xml.SendMessagesAction.CommandName">
            <summary>
            The Command Type Identifyer
            </summary>
        </member>
        <member name="T:MessageMedia.Gateway.xml.CheckCreditAction">
            <summary>
            action to check the user's credit balance
            </summary>
        </member>
        <member name="M:MessageMedia.Gateway.xml.CheckCreditAction.GetPost(MessageMedia.Account)">
            <summary>
            Prepares the POST string to perform a Check Credit action
            </summary>
            <param name="account">The Account object to use for Username and Password, etc</param>
            <returns>POST string</returns>
            <exception cref="T:MessageMedia.Exceptions.InvalidUserPassException"></exception>
        </member>
        <member name="P:MessageMedia.Gateway.xml.CheckCreditAction.CommandName">
            <summary>
            The Command Type Identifyer
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.xml.CheckCreditAction.ActionType">
            <summary>
            the Type of Action 
            </summary>
        </member>
        <member name="T:MessageMedia.Gateway.xml.ChangePasswordAction">
            <summary>
            Action to change the user's password
            </summary>
        </member>
        <member name="M:MessageMedia.Gateway.xml.ChangePasswordAction.GetPost(MessageMedia.Account)">
            <summary>
            Prepares the POST string to perform a Check Credit action
            </summary>
            <param name="account">The Account object to use for Username and Password, etc</param>
            <returns>POST string</returns>
            <exception cref="T:MessageMedia.Exceptions.InvalidUserPassException"></exception>
        </member>
        <member name="P:MessageMedia.Gateway.xml.ChangePasswordAction.CommandName">
            <summary>
            The Command Type Identifyer
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.xml.ChangePasswordAction.ActionType">
            <summary>
            the Type of Action 
            </summary>
        </member>
        <member name="T:MessageMedia.Gateway.ActionResult.SendMessagesResult">
            <summary>
            This class is used to return the result of a synchronous message send (see <see cref="M:MessageMedia.Messaging.SendMessagesSynchronous(MessageMedia.Account)"/> and <see cref="M:MessageMedia.Messaging.SendMessageBatchSynchronous(MessageMedia.Common.MessageQueue,MessageMedia.Account)"/>).
            </summary>
        </member>
        <member name="T:MessageMedia.Gateway.ActionResult.ActionResult">
            <summary>
            This class is used as the base class for all sychronous action result classes.
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ActionResult.ActionResult.Success">
            <summary>
            Gets whether the action was successful.
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ActionResult.ActionResult.AccountUsed">
            <summary>
            Gets the account that was used when performing this action.
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ActionResult.ActionResult.Exception">
            <summary>
            Gets the messaging exception if one occurred (null if the action was successful).
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ActionResult.SendMessagesResult.Messages">
            <summary>
            Gets the batch of messages that were sent to the gateway.
            </summary>
        </member>
        <member name="T:MessageMedia.Common.MessageOut">
            <summary>
            Base class for outgoing messages.
            </summary>
        </member>
        <member name="P:MessageMedia.Common.MessageOut.PhoneNumber">
            <summary>
            Gets or sets the phone number to send the message to.
            </summary>
        </member>
        <member name="P:MessageMedia.Common.MessageOut.PhoneNumber2">
            <summary>
            Gets the phone number to use when sending in MESSAGES2.0 format (full number without leading '+').
            </summary>
        </member>
        <member name="P:MessageMedia.Common.MessageOut.Delay">
            <summary>
            Gets or sets the delay (in seconds) to wait before the message will be sent from the gateway.
            </summary>
        </member>
        <member name="P:MessageMedia.Common.MessageOut.MessageText">
            <summary>
            Gets or sets the text of the message.
            </summary>
        </member>
        <member name="P:MessageMedia.Common.MessageOut.Recurring">
            <summary>
            Gets or sets the recurrence pattern for this message.
            </summary>
        </member>
        <member name="P:MessageMedia.Common.MessageOut.DeliveryStatus">
            <summary>
            Gets or sets the delivery status of the message.
            </summary>
        </member>
        <member name="P:MessageMedia.Common.MessageOut.DeliveryTime">
            <summary>
            Gets or setes the date and time that the message was received on the recepient's handset.
            </summary>
            <remarks>
            Note, the value of this property only has any meaning if <see cref="P:MessageMedia.Common.MessageOut.DeliveryStatus"/> equals <see cref="F:MessageMedia.Common.MessageDeliveryStatus.Delivered"/>.
            </remarks>
        </member>
        <member name="P:MessageMedia.Common.MessageOut.SendStatus">
            <summary>
            Gets the sending status of the message.
            </summary>
        </member>
        <member name="T:MessageMedia.AccountReplyPair">
            <summary>
            Internal structure used to store an account with the last time that account checked for replies.
            </summary>
        </member>
        <member name="F:MessageMedia.AccountReplyPair.AccountName">
            <summary>
            Name of the account.
            </summary>
        </member>
        <member name="F:MessageMedia.AccountReplyPair.LastCheckReply">
            <summary>
            The last known time the account checked for replies.
            </summary>
        </member>
        <member name="T:MessageMedia.Messaging">
            <summary>
            This class is a singleton class that controls all aspects of message sending and receiving.
            </summary>
            <example>
                You cannot create a new instance of this class, instead, you can create a variable
                and set it to the static <see cref="P:MessageMedia.Messaging.MessageController"/> property, or just use
                the <see cref="P:MessageMedia.Messaging.MessageController"/> property directly.
                <code lang="CS" title="Get a Messaging Instance" description="This example will show how to get an instance of the Messaging Object">
            	</code>
            	<code lang="CS">
            Messaging m = Messaging.MessageController;
                </code>
            	<code lang="VB">
            Dim m as Messaging = Messaging.MessageController
                </code>
            </example>
        </member>
        <member name="M:MessageMedia.Messaging.ResetMessageController">
            <summary>
            Only used by MessageMedia.Interop.Tests.
            </summary>
        </member>
        <member name="M:MessageMedia.Messaging.AddToQueue(MessageMedia.Common.MessageOut)">
            <summary>
            Add a message to the outbox.
            </summary>
            <param name="Message">The message to add to the outbox.</param>
            <returns>The message ID assigned to the outgoing message.</returns>
        </member>
        <member name="M:MessageMedia.Messaging.AddToQueue(MessageMedia.Common.MessageQueue)">
            <summary>
            Add a queue of messages to the outbox.
            </summary>
            <param name="Messages">The <see cref="T:MessageMedia.Common.MessageQueue"/> containing the messages to add to the outbox.</param>
        </member>
        <member name="M:MessageMedia.Messaging.AddToQueue(MessageMedia.Common.MessageOut[])">
            <summary>
            Add an array of messages to the outbox.
            </summary>
            <param name="Messages">The array of messsages to add to the outbox.</param>
        </member>
        <member name="M:MessageMedia.Messaging.RemoveUnbatchedMessages">
            <summary>
            Removes all the messages from the outbox queue that have not yet been batched.
            </summary>
            <returns>The list of messages that were removed.</returns>
        </member>
        <member name="M:MessageMedia.Messaging.TestAccount(MessageMedia.Account)">
            <summary>
            Synchronously tests the username and password using the specified account.
            </summary>
            <param name="account">The <see cref="T:MessageMedia.Account"/> to test the username and password for.</param>
            <returns>True if it is possible to connect and logon using the supplied account, false otherwise.</returns>
            <remarks>
            This method will use the proxy settings in the <see cref="T:MessageMedia.ProxyDetails"/> property of
            <see cref="P:MessageMedia.Messaging.Settings"/> if the use of a proxy gateway has been specified.
            </remarks>
        </member>
        <member name="M:MessageMedia.Messaging.TestAccount(MessageMedia.Account,MessageMedia.ProxyDetails)">
            <summary>
            Synchronously tests the username and password using the specified account and proxy details.
            </summary>
            <param name="account">The <see cref="T:MessageMedia.Account"/> to test the username and password for.</param>
            <param name="proxy">The <see cref="T:MessageMedia.ProxyDetails"/> to use when testing the specified account details.</param>
            <returns>True if it is possible to connect and logon using the supplied account, false otherwise.</returns>
        </member>
        <member name="M:MessageMedia.Messaging.TestProxy(MessageMedia.ProxyDetails)">
            <summary>
            Synchronously tests the internet connection using the specified proxy settings and the account details
            specified in <see cref="P:MessageMedia.Messaging.UserAccount"/>.
            </summary>
            <param name="proxy">The proxy details to test.</param>
            <returns>True if it is possible to connect to the internet using the supplied proxy settings, false otherwise.</returns>
        </member>
        <member name="M:MessageMedia.Messaging.TestProxy(MessageMedia.Account,MessageMedia.ProxyDetails)">
            <summary>
            Synchronously tests the internet connection using the specified proxy and account details.
            </summary>
            <param name="userAccount">The user account details to connect with.</param>
            <param name="proxy">The proxy details to test.</param>
            <returns>True if it is possible to connect using the supplied proxy settings, false otherwise.</returns>
        </member>
        <member name="M:MessageMedia.Messaging.TestConnection">
            <summary>
            Synchronously tests the connection to the internet by contacting the MessageMedia gateway.
            </summary>
            <returns>True if MessageMedia gateway can be contacted, false otherwise.</returns>
        </member>
        <member name="M:MessageMedia.Messaging.PhoneNumberIsValid(System.String)">
            <summary>
            Tests the validity of the supplied phone number using the country details specified in
            <see cref="P:MessageMedia.Messaging.UserAccount"/>.
            </summary>
            <param name="phoneNumber">The phone number to test.</param>
            <returns>True if the phone number is valid, false otherwise.</returns>
        </member>
        <member name="M:MessageMedia.Messaging.PhoneNumberIsValid(System.String,System.String@)">
            <summary>
            Tests the validity of the supplied phone number using the country details specified in
            <see cref="P:MessageMedia.Messaging.UserAccount"/> and returns a cleaned version.
            </summary>
            <param name="phoneNumber">The phone number to test.</param>
            <param name="cleaned">Returns the cleaned phone number (see <see cref="M:MessageMedia.Common.CountryDetails.CleanPhoneNumber(System.String)"/>).</param>
            <returns>True if the phone number is valid, false otherwise.</returns>
        </member>
        <member name="M:MessageMedia.Messaging.PhoneNumberIsValid(System.String,System.String@,MessageMedia.Common.CountryDetails)">
            <summary>
            Tests the validity of the supplied phone number using the specified <see cref="T:MessageMedia.Common.CountryDetails"/>
            object and returns a cleaned version.
            </summary>        
            <param name="phoneNumber">The phone number to test.</param>
            <param name="cleaned">Returns the cleaned phone number (see <see cref="M:MessageMedia.Common.CountryDetails.CleanPhoneNumber(System.String)"/>).</param>
            /// <param name="countryDetails">The country details to use to validate the phone number.</param>
            <returns>True if the phone number is valid, false otherwise.</returns>
        </member>
        <member name="M:MessageMedia.Messaging.GetCheckReplyTimeToWait">
            <summary>
            Gets the time required to wait before <see cref="M:MessageMedia.Messaging.CheckReplies"/> can be called again with the
            account details specified in <see cref="P:MessageMedia.Messaging.UserAccount"/>.
            </summary>
            <returns>The time required to wait before <see cref="M:MessageMedia.Messaging.CheckReplies"/> can be called again.</returns>
            <remarks>
            Replies can be checked for at a maximum rate of once per minute per account.
            </remarks>
        </member>
        <member name="M:MessageMedia.Messaging.GetCheckReplyTimeToWait(MessageMedia.Account)">
            <summary>
            Gets the time required to wait before <see cref="M:MessageMedia.Messaging.CheckReplies(MessageMedia.Account)"/> can be called again with the
            specified account.
            </summary>
            <param name="account">The account to determine the time to wait for.</param>
            <returns>The time required to wait before <see cref="M:MessageMedia.Messaging.CheckReplies(MessageMedia.Account)"/> can be called again.</returns>
            <remarks>
            Replies can be checked for at a maximum rate of once per minute per account.
            </remarks>
        </member>
        <member name="M:MessageMedia.Messaging.SendMessages">
            <summary>
            Sends all messages in the <see cref="P:MessageMedia.Messaging.Outbox"/> queue using the account details specified in <see cref="P:MessageMedia.Messaging.UserAccount"/>.
            </summary>
            <remarks>
            The <see cref="E:MessageMedia.Messaging.SendMessagesComplete"/> event is raised when this action is complete.
            </remarks>
        </member>
        <member name="M:MessageMedia.Messaging.SendMessages(MessageMedia.Account)">
            <summary>
            Sends all messages in the <see cref="P:MessageMedia.Messaging.Outbox"/> queue using the specified account.
            </summary>
            <param name="account">The account to use when sending the messages.</param>
            <remarks>
            The <see cref="E:MessageMedia.Messaging.SendMessagesComplete"/> event is raised when this action is complete.
            </remarks>
        </member>
        <member name="M:MessageMedia.Messaging.SendMessageBatch(MessageMedia.Common.MessageQueue)">
            <summary>
            Sends a batch of messages without adding the messages to <see cref="P:MessageMedia.Messaging.Outbox"/> using the account details
            specified in <see cref="P:MessageMedia.Messaging.UserAccount"/>.
            </summary>
            <param name="batch">A <see cref="T:MessageMedia.Common.MessageQueue"/> object containing the batch of messages to send.</param>
            <returns>True if the batch is sent successfully, false otherwise.</returns>
            <remarks>
            The <see cref="E:MessageMedia.Messaging.SendMessagesComplete"/> event is raised when this action is complete.
            </remarks>
        </member>
        <member name="M:MessageMedia.Messaging.SendMessageBatch(MessageMedia.Common.MessageQueue,MessageMedia.Account)">
            <summary>
            Sends a batch of messages without adding the messages to <see cref="P:MessageMedia.Messaging.Outbox"/> using the specified account details.
            </summary>
            <param name="batch">A <see cref="T:MessageMedia.Common.MessageQueue"/> object containing the batch of messages to send.</param>
            <param name="account">The account settings to use.</param>
            <returns>True if the batch is sent successfully, false otherwise.</returns>
            <remarks>
            The <see cref="E:MessageMedia.Messaging.SendMessagesComplete"/> event is raised when this action is complete.
            </remarks>
        </member>
        <member name="M:MessageMedia.Messaging.CheckReplies">
            <summary>
            Checks the gateway for reply messages using the account details specified in <see cref="P:MessageMedia.Messaging.UserAccount"/>.
            </summary>
            <returns>True if replies were checked, false otherwise.</returns>
            <remarks>
            Replies can be checked for at a maximum rate of once per minute per account. This
            means that if this function is called more than once per minute with the same
            account settings it will not check for replies and will return false.
            <p>
            The <see cref="E:MessageMedia.Messaging.CheckRepliesComplete"/> event is raised when this action is complete.
            </p>
            </remarks>
        </member>
        <member name="M:MessageMedia.Messaging.CheckReplies(MessageMedia.Account)">
            <summary>
            Checks the gateway for reply messages using the specified account.
            </summary>
            <param name="account">The account to use when checking for replies.</param>
            <returns>True if replies were checked, false otherwise.</returns>
            <remarks>
            Replies can be checked for at a maximum rate of once per minute per account. This
            means that if this function is called more than once per minute with the same
            account settings it will not check for replies and will return false.
            <p>
            The <see cref="E:MessageMedia.Messaging.CheckRepliesComplete"/> event is raised when this action is complete.
            </p>
            </remarks>
        </member>
        <member name="M:MessageMedia.Messaging.ConfirmReplies">
            <summary>
            Confirms that replies have been downloaded from the gateway using the account details
            specified in <see cref="P:MessageMedia.Messaging.UserAccount"/>.
            </summary>
            <remarks>
            If the <see cref="P:MessageMedia.ServerSettings.AutoConfirm"/> property of <see cref="P:MessageMedia.Messaging.Settings"/> is set to true
            (this is the default) reply confirmation happens automatically so this function does not need to be called. If
            auto-confirmation has been disabled you will need to use this or one of the other function to confirm replies
            manually so that downloaded replies are deleted from the gateway. Replies will remain on the gateway until they
            are confirmed.
            <p>
            The <see cref="E:MessageMedia.Messaging.ConfirmRepliesComplete"/> event is raised when this action is complete.
            </p>
            </remarks>
        </member>
        <member name="M:MessageMedia.Messaging.ConfirmReplies(MessageMedia.Account)">
            <summary>
            Confirms that replies have been downloaded from the gateway using the specified account.
            </summary>
            <param name="account">The account to confirm replies for.</param>
            <remarks>
            If the <see cref="P:MessageMedia.ServerSettings.AutoConfirm"/> property of <see cref="P:MessageMedia.Messaging.Settings"/> is set to true
            (this is the default) reply confirmation happens automatically so this function does not need to be called. If
            auto-confirmation has been disabled you will need to use this or one of the other function to confirm replies
            manually so that downloaded replies are deleted from the gateway. Replies will remain on the gateway until they
            are confirmed.
            <p>
            The <see cref="E:MessageMedia.Messaging.ConfirmRepliesComplete"/> event is raised when this action is complete.
            </p>
            </remarks>
        </member>
        <member name="M:MessageMedia.Messaging.CheckCredit">
            <summary>
            Check the remaining account credit balance using the account details specified in <see cref="P:MessageMedia.Messaging.UserAccount"/>.
            </summary>
            <remarks>
            The <see cref="E:MessageMedia.Messaging.CheckCreditComplete"/> event is raised when this action is complete.
            </remarks>
        </member>
        <member name="M:MessageMedia.Messaging.CheckCredit(MessageMedia.Account)">
            <summary>
            Check the remaining account credit balance using the specified account.
            </summary>
            <param name="account">The account to use when checking the remaining credit balance.</param>
            <remarks>
            The <see cref="E:MessageMedia.Messaging.CheckCreditComplete"/> event is raised when this action is complete.
            </remarks>
        </member>
        <member name="M:MessageMedia.Messaging.UpdateUserDetails">
            <summary>
            Updates the user details with the gateway using the account details specified in <see cref="P:MessageMedia.Messaging.UserAccount"/>.
            </summary>
            <remarks>
            The <see cref="E:MessageMedia.Messaging.UpdateUserDetailsComplete"/> event is raised when this action is complete.
            </remarks>
        </member>
        <member name="M:MessageMedia.Messaging.UpdateUserDetails(MessageMedia.Account)">
            <summary>
            Update the user details with the gateway using the specified user account.
            </summary>
            <param name="account">The updated account details.</param>
            <remarks>
            The <see cref="E:MessageMedia.Messaging.UpdateUserDetailsComplete"/> event is raised when this action is complete.
            </remarks>
        </member>
        <member name="M:MessageMedia.Messaging.CheckRepliesSynchronous">
            <summary>
            Synchronously checks the gateway for reply messages using the account details specified in <see cref="P:MessageMedia.Messaging.UserAccount"/>.
            </summary>
            <returns>A <see cref="T:MessageMedia.Gateway.ActionResult.CheckRepliesResult"/> object that represents the result of the action.</returns>
            <remarks>
            Replies can be checked for at a maximum rate of once per minute per account. This
            means that if this function is called more than once per minute with the same
            account settings it will not check for replies and will return false.
            </remarks>
        </member>
        <member name="M:MessageMedia.Messaging.CheckRepliesSynchronous(MessageMedia.Account)">
            <summary>
            Synchronously checks the gateway for reply messages using the specified account.
            </summary>
            <param name="account">The account to use when checking for replies.</param>
            <returns>
            A <see cref="T:MessageMedia.Gateway.ActionResult.CheckRepliesResult"/> object that represents the result of the action.
            </returns>
            <remarks>
            Replies can be checked for at a maximum rate of once per minute per account. This
            means that if this function is called more than once per minute with the same
            account settings it will not check for replies and will return false.
            </remarks>
        </member>
        <member name="M:MessageMedia.Messaging.ConfirmRepliesSynchronous">
            <summary>
            Synchronously confirms that replies have been downloaded from the gateway using the account details
            specified in <see cref="P:MessageMedia.Messaging.UserAccount"/>.
            </summary>
            <returns>
            A <see cref="T:MessageMedia.Gateway.ActionResult.ConfirmRepliesResult"/> object that represents the result of the action.
            </returns>
            <remarks>
            If the <see cref="P:MessageMedia.ServerSettings.AutoConfirm"/> property of <see cref="P:MessageMedia.Messaging.Settings"/> is set to true
            (this is the default) reply confirmation happens automatically so this function does not need to be called. If
            auto-confirmation has been disabled you will need to use this or one of the other reply confirmation functions
            to confirm replies manually so that downloaded replies are deleted from the gateway. Replies will remain on the
            gateway until they are confirmed.
            </remarks>
        </member>
        <member name="M:MessageMedia.Messaging.ConfirmRepliesSynchronous(MessageMedia.Account)">
            <summary>
            Synchronously confirms that replies have been downloaded from the gateway using the specified account details.
            </summary>
            <param name="account">The account to confirm replies for.</param>
            <returns>
            A <see cref="T:MessageMedia.Gateway.ActionResult.ConfirmRepliesResult"/> object that represents the result of the action.
            </returns>
            <remarks>
            If the <see cref="P:MessageMedia.ServerSettings.AutoConfirm"/> property of <see cref="P:MessageMedia.Messaging.Settings"/> is set to true
            (this is the default) reply confirmation happens automatically so this function does not need to be called. If
            auto-confirmation has been disabled you will need to use this or one of the other reply confirmation functions
            to confirm replies manually so that downloaded replies are deleted from the gateway. Replies will remain on the
            gateway until they are confirmed.
            </remarks>
        </member>
        <member name="M:MessageMedia.Messaging.SendMessagesSynchronous">
            <summary>
            Synchronously sends all messages in the <see cref="P:MessageMedia.Messaging.Outbox"/> queue using the account details specified in <see cref="P:MessageMedia.Messaging.UserAccount"/>.
            </summary>
            <returns>
            A <see cref="T:MessageMedia.Gateway.ActionResult.SendMessagesResult"/> object that represents the result of the action.
            </returns>
        </member>
        <member name="M:MessageMedia.Messaging.SendMessagesSynchronous(MessageMedia.Account)">
            <summary>
            Synchronously sends all messages in the <see cref="P:MessageMedia.Messaging.Outbox"/> queue using the specified account details.
            </summary>
            <returns>
            A <see cref="T:MessageMedia.Gateway.ActionResult.SendMessagesResult"/> object that represents the result of the action.
            </returns>
        </member>
        <member name="M:MessageMedia.Messaging.SendMessageBatchSynchronous(MessageMedia.Common.MessageQueue)">
            <summary>
            Synchronously sends a batch of messages without adding the messages to <see cref="P:MessageMedia.Messaging.Outbox"/> using the account details
            specified in <see cref="P:MessageMedia.Messaging.UserAccount"/>.
            </summary>
            <param name="batch">A <see cref="T:MessageMedia.Common.MessageQueue"/> object containing the batch of messages to send.</param>
            <returns>
            A <see cref="T:MessageMedia.Gateway.ActionResult.SendMessagesResult"/> object that represents the result of the action.
            </returns>
        </member>
        <member name="M:MessageMedia.Messaging.SendMessageBatchSynchronous(MessageMedia.Common.MessageQueue,MessageMedia.Account)">
            <summary>
            Synchronously sends a batch of messages without adding the messages to <see cref="P:MessageMedia.Messaging.Outbox"/> using the specified account details.
            </summary>
            <param name="batch">A <see cref="T:MessageMedia.Common.MessageQueue"/> object containing the batch of messages to send.</param>
            <param name="account">The account settings to use.</param>
            <returns>
            A <see cref="T:MessageMedia.Gateway.ActionResult.SendMessagesResult"/> object that represents the result of the action.
            </returns>
        </member>
        <member name="M:MessageMedia.Messaging.CheckCreditSynchronous">
            <summary>
            Synchronously checks the remaining account credit balance using the account details specified in <see cref="P:MessageMedia.Messaging.UserAccount"/>.
            </summary>
            <returns>
            A <see cref="T:MessageMedia.Gateway.ActionResult.CheckCreditResult"/> object that represents the result of the action.
            </returns>
        </member>
        <member name="M:MessageMedia.Messaging.CheckCreditSynchronous(MessageMedia.Account)">
            <summary>
            Synchronously checks the remaining account credit balance using the specified account details.
            </summary>
            <param name="account">The account to use when checking for the remaining credit balance.</param>
            <returns>
            A <see cref="T:MessageMedia.Gateway.ActionResult.CheckCreditResult"/> object that represents the result of the action.
            </returns>
        </member>
        <member name="M:MessageMedia.Messaging.UpdateUserDetailsSynchronous">
            <summary>
            Synchronously updates the user details with the gateway using the account details specified in <see cref="P:MessageMedia.Messaging.UserAccount"/>.
            </summary>
            <returns>
            A <see cref="T:MessageMedia.Gateway.ActionResult.UpdateUserDetailsResult"/> object that represents the result of the action.
            </returns>
        </member>
        <member name="M:MessageMedia.Messaging.UpdateUserDetailsSynchronous(MessageMedia.Account)">
            <summary>
            Synchronously updates the user details with the gateway using the account details specified in <see cref="P:MessageMedia.Messaging.UserAccount"/>.
            </summary>
            <param name="account">The account to use when checking for the remaining credit balance.</param>
            <returns>
            A <see cref="T:MessageMedia.Gateway.ActionResult.UpdateUserDetailsResult"/> object that represents the result of the action.
            </returns>
        </member>
        <member name="M:MessageMedia.Messaging.StopSending">
            <summary>
            Stops any currently processing asynchronous actions.
            </summary>
            <remarks>
            The <see cref="E:MessageMedia.Messaging.MessagingProcessingStopped"/> event is raised when this action is complete.
            </remarks>
        </member>
        <member name="P:MessageMedia.Messaging.MessageController">
            <summary>
            This is the singleton instance to use for all messaging operations.
            </summary>
        </member>
        <member name="P:MessageMedia.Messaging.Version">
            <summary>
            Gets the version number of the MessageMedia .NET API.
            </summary>
        </member>
        <member name="P:MessageMedia.Messaging.ApplicationVersion">
            <summary>
            Gets or sets the version of the client application.
            </summary>
            <remarks>
            This information is sent to the MessageMedia gateway and
            is used to help resolve support issues.
            </remarks>
        </member>
        <member name="P:MessageMedia.Messaging.DisableEvents">
            <summary>
            Gets or sets whether events should be generated.
            </summary>
            <value>By default the value of this property is false.</value>
            <remarks>
            This property can be used to turn of the generation of messaging events.
            </remarks>
        </member>
        <member name="P:MessageMedia.Messaging.Outbox">
            <summary>
            Gets the list of unsent messages.
            </summary>
            <remarks>
            This list of messages represents the messages that have been queued for sending
            but as yet remain unsent.
            </remarks>
        </member>
        <member name="P:MessageMedia.Messaging.Inbox">
            <summary>
            Gets the list of received messages.
            </summary>
            <remarks>
            This list of messages represents all reply messages and delivery that have been
            downloaded from the gateway.
            </remarks>
        </member>
        <member name="P:MessageMedia.Messaging.Settings">
            <summary>
            Gets or sets the settings used to communicate with the MessageMedia gateway.
            </summary>
        </member>
        <member name="P:MessageMedia.Messaging.UserAccount">
            <summary>
            Gets or sets the account details that are used when connecting with the MessageMedia gateway.
            </summary>
        </member>
        <member name="P:MessageMedia.Messaging.AutoReceive">
            <summary>
            Gets or sets whether the auto-receive feature is on.
            </summary>
            <remarks>
            When the auto-receive feature is enabled the API will automatically check for replies.
            The time span between these automatic recieve cycles is determined by <see cref="P:MessageMedia.ServerSettings.AutoReceiveWaitTime"/>.
            Setting this property to true results in the MessageMedia gateway being contacted so it must be
            set AFTER the user account details have been set in <see cref="P:MessageMedia.Messaging.UserAccount"/>.
            </remarks>
        </member>
        <member name="E:MessageMedia.Messaging.MessagingStatusChanged">
            <summary>
            Event raised when the status of the <see cref="T:MessageMedia.Messaging"/> object changes.
            </summary>
        </member>
        <member name="E:MessageMedia.Messaging.SendMessagesComplete">
            <summary>
            Event raised after <see cref="P:MessageMedia.Messaging.SendMessages"/> has been called and the action is complete.
            </summary>
        </member>
        <member name="E:MessageMedia.Messaging.CheckRepliesComplete">
            <summary>
            Event raised after <see cref="M:MessageMedia.Messaging.CheckReplies"/> or <see cref="M:MessageMedia.Messaging.CheckReplies(MessageMedia.Account)"/>
            has been called and the action is complete.
            </summary>
            <remarks>
            This event is raised after <see cref="M:MessageMedia.Messaging.CheckReplies"/> or <see cref="M:MessageMedia.Messaging.CheckReplies(MessageMedia.Account)"/> is called and
            the action is complete.
            <p>
            The event handler for this event is passed any replies that were received as well as any delivery reports that
            were downloaded from the gateway (if the <see cref="P:MessageMedia.ServerSettings.DeliveryReport"/> property of
            <see cref="P:MessageMedia.Messaging.Settings"/> is set to true).
            </p>
            </remarks>
        </member>
        <member name="E:MessageMedia.Messaging.CheckCreditComplete">
            <summary>
            Event raised after credit has been checked.
            </summary>
            <remarks>
            This event is raised after <see cref="M:MessageMedia.Messaging.CheckReplies"/> or <see cref="M:MessageMedia.Messaging.CheckReplies(MessageMedia.Account)"/> is called
            and the action is complete. It is also raised after <see cref="M:MessageMedia.Messaging.SendMessages"/> or <see cref="M:MessageMedia.Messaging.SendMessages(MessageMedia.Account)"/>
            is called and the action is complete.
            </remarks>
        </member>
        <member name="E:MessageMedia.Messaging.UpdateUserDetailsComplete">
            <summary>
            Event raised when the user account details have been updated.
            </summary>
            <remarks>
            This event is raised after <see cref="M:MessageMedia.Messaging.UpdateUserDetails"/> or <see cref="M:MessageMedia.Messaging.UpdateUserDetails(MessageMedia.Account)"/> is called
            and the action is complete.
            </remarks>
        </member>
        <member name="E:MessageMedia.Messaging.ConfirmRepliesComplete">
            <summary>
            Event raised when replies have been confirmed on the gateway.
            </summary>
            <remarks>
            This event is raised after <see cref="M:MessageMedia.Messaging.ConfirmReplies"/> or <see cref="M:MessageMedia.Messaging.ConfirmReplies(MessageMedia.Account)"/> is called
            and the action is complete.
            </remarks>
        </member>
        <member name="E:MessageMedia.Messaging.ErrorThrown">
            <summary>Event raised when an error occurs and an exception is thrown.</summary>
        </member>
        <member name="P:MessageMedia.Messaging.StoppingProcesses">
            <summary>
            Gets whether the <see cref="M:MessageMedia.Messaging.StopSending"/> command has been given.
            </summary>
            <returns>Whether the <see cref="M:MessageMedia.Messaging.StopSending"/> command has been given.</returns>
        </member>
        <member name="E:MessageMedia.Messaging.MessagingProcessingStopped">
            <summary>
            Event raised after the <see cref="M:MessageMedia.Messaging.StopSending"/> command has been given and the asyncronous processes have finished.
            </summary>
        </member>
        <member name="M:MessageMedia.Gateway.v2.UpdateUserDetailsAction.GetPost(MessageMedia.Account)">
            <summary>
            Prepares the POST string to perform an Update Details action
            </summary>
            <param name="account">The Account object to use for Username and Password, etc</param>
            <returns>POST string</returns>
            <exception cref="T:MessageMedia.Exceptions.InvalidUserPassException"></exception>
        </member>
        <member name="M:MessageMedia.Gateway.v2.CreditReturn.#ctor">
            <summary>
            default constructor for xml
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.v2.CreditReturn.Balance">
            <summary>
            the credit balance of the account
            </summary>
        </member>
        <member name="M:MessageMedia.Gateway.v2.SentMessagesReturn.#ctor">
            <summary>
            default constructor for xml
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.v2.SentMessagesReturn.SentItems">
            <summary>
            the list of messages that were sent
            </summary>
        </member>
        <member name="T:MessageMedia.MMS.MMSMessage">
            <summary>
            Details of the MMS Message
            </summary>
        </member>
        <member name="P:MessageMedia.MMS.MMSMessage.MessageText">
            <summary>
            Subject Line of the Message
            </summary>
        </member>
        <member name="P:MessageMedia.MMS.MMSMessage.ValidityPeriod">
            <summary>
            The Validity Period for a message within the mobile network.
            Once sent, the mobile network will continue to attempt delivery
            until the Validity Period has expired.
            </summary>
        </member>
        <member name="P:MessageMedia.MMS.MMSMessage.DeliveryReport">
            <summary>
            Request a delivery report for this message (may incur additional charges)
            </summary>
        </member>
        <member name="P:MessageMedia.MMS.MMSMessage.Slides">
            <summary>
            The collection of Slides that make up the message body
            </summary>
        </member>
        <member name="T:MessageMedia.Diagnostics.TextLogger">
            <summary>
            Logger class that outputs log information to a specified text file.
            </summary>
        </member>
        <member name="M:MessageMedia.Diagnostics.TextLogger.#ctor">
            <summary>
            Paramaterless constructor for XML.
            </summary>
        </member>
        <member name="M:MessageMedia.Diagnostics.TextLogger.#ctor(System.String)">
            <summary>
            Constructor for this class.
            </summary>
            <param name="FileName">Full path to a text file where log information will be saved.</param>
            <exception cref="T:System.ArgumentException">If the <paramref name="FileName"/> is invalid, or no permission to read/write the file</exception>
            <remarks>The text file will be created if it does not exist.  It must be in a directory for which the user has read/write permissions.</remarks>
        </member>
        <member name="M:MessageMedia.Diagnostics.TextLogger.WriteLine(MessageMedia.Diagnostics.LogEntryType,System.String)">
            <summary>
            Outputs a line of text to the log.
            </summary>
            <param name="Type">The log entry type.</param>
            <param name="Text">The text to output.</param>
        </member>
        <member name="M:MessageMedia.Diagnostics.TextLogger.WriteLine(MessageMedia.Diagnostics.LogEntryType,System.String,System.Object[])">
            <summary>
            Outputs a line of text to the log, using standard string format notation.
            </summary>
            <param name="Type">The log entry type.</param>
            <param name="Format">The log message text containing zero or more format items.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:MessageMedia.Diagnostics.TextLogger.GetLog">
            <summary>
            Retrieves the current log.
            </summary>
            <returns>The current log as a string.</returns>
        </member>
        <member name="M:MessageMedia.Diagnostics.TextLogger.WriteException(System.Exception)">
            <summary>
            Outputs exception details to the log.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> object to output.</param>
        </member>
        <member name="P:MessageMedia.Diagnostics.TextLogger.Type">
            <summary>
            Gets the <see cref="T:MessageMedia.Diagnostics.LogType"/> of this instance.
            </summary>
            <returns>The <see cref="T:MessageMedia.Diagnostics.LogType"/> of this instance.</returns>
        </member>
        <member name="P:MessageMedia.Diagnostics.TextLogger.Settings">
            <summary>
            Gets any log settings in a concatenated string format.
            </summary>
            <returns>The log settings in a concatenated string format.</returns>
        </member>
        <member name="T:MessageMedia.UI.Editors.FlagEnumUIEditor">
            <summary>
            UITypeEditor for flag enums
            </summary>
        </member>
        <member name="M:MessageMedia.UI.Editors.FlagEnumUIEditor.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:MessageMedia.UI.Editors.FlagEnumUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            editing the value
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MessageMedia.UI.Editors.FlagEnumUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            the edit style
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MessageMedia.UI.Editors.FlagCheckedListBox">
            <summary>
            checked list box for editing Enums with Flags
            </summary>
        </member>
        <member name="M:MessageMedia.UI.Editors.FlagCheckedListBox.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:MessageMedia.UI.Editors.FlagCheckedListBox.Add(System.Int32,System.String)">
            <summary>
            Adds an integer value and its associated description
            </summary>
            <param name="v"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:MessageMedia.UI.Editors.FlagCheckedListBox.Add(MessageMedia.UI.Editors.FlagCheckedListBoxItem)">
            <summary>
            Adds a list box item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MessageMedia.UI.Editors.FlagCheckedListBox.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)">
            <summary>
            when an item is clicked
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MessageMedia.UI.Editors.FlagCheckedListBox.UpdateCheckedItems(System.Int32)">
            <summary>
            Checks/Unchecks items depending on the give bitvalue
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MessageMedia.UI.Editors.FlagCheckedListBox.UpdateCheckedItems(MessageMedia.UI.Editors.FlagCheckedListBoxItem,System.Windows.Forms.CheckState)">
            <summary>
            Updates items in the checklistbox
            </summary>
            <param name="composite">The item that was checked/unchecked</param>
            <param name="cs">The check state of that item</param>
        </member>
        <member name="M:MessageMedia.UI.Editors.FlagCheckedListBox.GetCurrentValue">
            <summary>
            Gets the current bit value corresponding to all checked items
            </summary>
            <returns></returns>
        </member>
        <member name="P:MessageMedia.UI.Editors.FlagCheckedListBox.EnumValue">
            <summary>
            the enum value
            </summary>
        </member>
        <member name="T:MessageMedia.UI.Editors.FlagCheckedListBoxItem">
            <summary>
            Represents an item in the checklistbox
            </summary>
        </member>
        <member name="M:MessageMedia.UI.Editors.FlagCheckedListBoxItem.#ctor(System.Int32,System.String)">
            <summary>
            default constructor
            </summary>
            <param name="v"></param>
            <param name="c"></param>
        </member>
        <member name="M:MessageMedia.UI.Editors.FlagCheckedListBoxItem.ToString">
            <summary>
            gets the caption
            </summary>
            <returns></returns>
        </member>
        <member name="M:MessageMedia.UI.Editors.FlagCheckedListBoxItem.IsMemberFlag(MessageMedia.UI.Editors.FlagCheckedListBoxItem)">
            <summary>
            Returns true if this value is a member of the composite bit value
            </summary>
            <param name="composite"></param>
            <returns></returns>
        </member>
        <member name="P:MessageMedia.UI.Editors.FlagCheckedListBoxItem.IsFlag">
            <summary>
            Returns true if the value corresponds to a single bit being set
            </summary>
        </member>
        <member name="P:MessageMedia.UI.Editors.FlagCheckedListBoxItem.Value">
            <summary>
            the current value
            </summary>
        </member>
        <member name="P:MessageMedia.UI.Editors.FlagCheckedListBoxItem.Caption">
            <summary>
            the caption to use
            </summary>
        </member>
        <member name="T:MessageMedia.Gateway.xml.CheckRepliesAction">
            <summary>
            action to check the user's credit balance
            </summary>
        </member>
        <member name="M:MessageMedia.Gateway.xml.CheckRepliesAction.GetPost(MessageMedia.Account)">
            <summary>
            Prepares the POST string to perform a Check Credit action
            </summary>
            <param name="account">The Account object to use for Username and Password, etc</param>
            <returns>POST string</returns>
            <exception cref="T:MessageMedia.Exceptions.InvalidUserPassException"></exception>
        </member>
        <member name="P:MessageMedia.Gateway.xml.CheckRepliesAction.CommandName">
            <summary>
            The Command Type Identifyer
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.xml.CheckRepliesAction.ActionType">
            <summary>
            the Type of Action 
            </summary>
        </member>
        <member name="T:MessageMedia.Gateway.ActionResult.CheckRepliesResult">
            <summary>
            This class is used to return the result of a synchronous reply check (see <see cref="M:MessageMedia.Messaging.CheckRepliesSynchronous(MessageMedia.Account)"/>).
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ActionResult.CheckRepliesResult.CheckReplyFrequencyExceeded">
            <summary>
            Gets whether the call to <see cref="M:MessageMedia.Messaging.CheckRepliesSynchronous(MessageMedia.Account)"/> failed due to checking for
            replies at a frequency greater than once per minute per account.
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ActionResult.CheckRepliesResult.Messages">
            <summary>
            Gets the list of received reply messages that were downloaded from the gateway.
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ActionResult.CheckRepliesResult.DeliveryReports">
            <summary>
            Gets the list of delivery reports that were downloaded from the gateway.
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ActionResult.CheckRepliesResult.ConfirmationResult">
            <summary>
            Gets the result of the call to <see cref="M:MessageMedia.Messaging.ConfirmRepliesSynchronous(MessageMedia.Account)"/> if
            <see cref="P:MessageMedia.ServerSettings.AutoConfirm"/> property of <see cref="P:MessageMedia.Messaging.Settings"/> is set to true.
            </summary>
        </member>
        <member name="T:MessageMedia.Voice.VoiceMessage">
            <summary>
            Outgoing voice message class.
            </summary>
        </member>
        <member name="M:MessageMedia.Voice.VoiceMessage.#ctor">
            <summary>
            Default contructor.
            </summary>
        </member>
        <member name="M:MessageMedia.Voice.VoiceMessage.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor specifying message parameters.
            </summary>
            <param name="Number">The phone number to send the message to.</param>
            <param name="MsgText">The text of the message to send.</param>
            <param name="Delay">The delay (in seconds) to wait before sending the message.</param>
            <param name="MessageId">The ID of the message.</param>
        </member>
        <member name="M:MessageMedia.Voice.VoiceMessage.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructor specifying message parameters.
            </summary>
            <param name="Number">The phone number to send the message to.</param>
            <param name="MsgText">The text of the message to send.</param>
            <param name="Delay">The delay (in seconds) to wait before sending the message.</param>
        </member>
        <member name="M:MessageMedia.Voice.VoiceMessage.#ctor(System.String,System.String)">
            <summary>
            Constructor specifying message parameters.
            </summary>
            <param name="Number">The phone number to send the message to.</param>
            <param name="MsgText">The text of the message to send.</param>
        </member>
        <member name="M:MessageMedia.Voice.VoiceMessage.PostString">
            <summary>
            Message formatted and ready to send to the Gateway
            </summary>
            <returns></returns>
        </member>
        <member name="T:MessageMedia.SMS.SMSMessage">
            <summary>
            Outgoing SMS message class.
            </summary>
        </member>
        <member name="M:MessageMedia.SMS.SMSMessage.#ctor">
            <summary>
            Default contructor.
            </summary>
        </member>
        <member name="M:MessageMedia.SMS.SMSMessage.#ctor(System.String,System.String,System.Int32,System.Int32,MessageMedia.Common.ValidPeriod,System.Boolean)">
            <summary>
            Constructor specifying message parameters.
            </summary>
            <param name="Number">The phone number to send the message to.</param>
            <param name="MsgText">The text of the message to send.</param>
            <param name="Delay">The delay (in seconds) to wait before sending.</param>
            <param name="MessageId">The ID of the message.</param>
            <param name="validity">The validity period for the message.</param>
            <param name="DeliveryReport">Whether a delivery report is requested for this message (may incur additional charges).</param>
        </member>
        <member name="M:MessageMedia.SMS.SMSMessage.#ctor(System.String,System.String,System.Int32,System.Int32,MessageMedia.Common.ValidPeriod)">
            <summary>
            Constructor specifying message parameters.
            </summary>
            <param name="Number">The phone number to send the message to.</param>
            <param name="MsgText">The text of the message to send.</param>
            <param name="Delay">The delay (in seconds) to wait before sending.</param>
            <param name="MessageId">The ID of the message.</param>
            <param name="validity">The validity period for the message.</param>
        </member>
        <member name="M:MessageMedia.SMS.SMSMessage.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor specifying message parameters.
            </summary>
            <param name="Number">The phone number to send the message to.</param>
            <param name="MsgText">The text of the message to send.</param>
            <param name="Delay">The delay (in seconds) to wait before sending.</param>
            <param name="MessageId">The ID of the message.</param>
        </member>
        <member name="M:MessageMedia.SMS.SMSMessage.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructor specifying message parameters.
            </summary>
            <param name="Number">The phone number to send the message to.</param>
            <param name="MsgText">The text of the message to send.</param>
            <param name="Delay">The delay (in seconds) to wait before sending.</param>
        </member>
        <member name="M:MessageMedia.SMS.SMSMessage.#ctor(System.String,System.String)">
            <summary>
            Constructor specifying message parameters.
            </summary>
            <param name="Number">The phone number to send the message to.</param>
            <param name="MsgText">The text of the message to send.</param>
        </member>
        <member name="M:MessageMedia.SMS.SMSMessage.CreditCheckText(System.String)">
            <summary>
            Checks how many message credits would be used if the specified message text were to be sent.
            </summary>
            <param name="MessageText">The message text to check.</param>
            <returns>The number of credits it would cost to send this message.</returns>
        </member>
        <member name="M:MessageMedia.SMS.SMSMessage.PostString">
            <summary>
            Message formatted and ready to send to the Gateway
            </summary>
            <returns></returns>
        </member>
        <member name="P:MessageMedia.SMS.SMSMessage.ValidityPeriod">
            <summary>
            Gets or sets the validity period for the message within the mobile network.
            </summary>
            <value>
            If this value is not explicitly set the system will use the
            <see cref="P:MessageMedia.ServerSettings.ValidityPeriod"/> value stored in
            <see cref="P:MessageMedia.Messaging.Settings"/>.
            </value>
            <remarks>
            Once sent, the mobile network will continue to attempt delivery
            until the validity period has expired.
            </remarks>
        </member>
        <member name="P:MessageMedia.SMS.SMSMessage.DeliveryReport">
            <summary>
            Gets or sets whether a delivery report for this message is required (may incur additional charges).
            </summary>
            <value>
            If this value is not explicitly set the system will use the
            <see cref="P:MessageMedia.ServerSettings.DeliveryReport"/> value stored in
            <see cref="P:MessageMedia.Messaging.Settings"/>.
            </value>
            <remarks>
            Delivery reporting enables tracking of messages showing your application the exact
            time that each message you send is delivered on the recipient's handset.
            </remarks>
        </member>
        <member name="T:MessageMedia.Common.DeliveryReport">
            <summary>
            Delivery report message from the gateway.
            </summary>
            <remarks>
            This class provides a means for reporting on the delivery status of a message.
            </remarks>
        </member>
        <member name="P:MessageMedia.Common.DeliveryReport.Status">
            <summary>
            Delivery status of the message.
            </summary>
        </member>
        <member name="P:MessageMedia.Common.DeliveryReport.MessageText">
            <summary>
            Gets the delivery status report text of the message.
            </summary>
        </member>
        <member name="T:MessageMedia.Gateway.ActionResult.UpdateUserDetailsResult">
            <summary>
            This class is used to return the result of a synchronous update of user details (see <see cref="M:MessageMedia.Messaging.UpdateUserDetailsSynchronous(MessageMedia.Account)"/>).
            </summary>
        </member>
        <member name="M:MessageMedia.Gateway.Server.#ctor(System.String)">
            <summary>
            Creates a new MessageMedia Server description
            </summary>
            <param name="address">the Web Address of the Server (eg "smsmaster.m4u.com.au")</param>
        </member>
        <member name="M:MessageMedia.Gateway.Server.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new MessageMedia Server description
            </summary>
            <param name="address">the Web Address of the Server (eg "smsmaster.m4u.com.au")</param>
            <param name="timeout">Timeout settings for internet connection (seconds)</param>
        </member>
        <member name="M:MessageMedia.Gateway.Server.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new MessageMedia Server description
            </summary>
            <param name="address">the Web Address of the Server (eg "smsmaster.m4u.com.au")</param>
            <param name="timeout">Timeout settings for internet connection (seconds)</param>
            <param name="secureserver">Use https:// protocol to communicate with the MessageMedia Server</param>
        </member>
        <member name="M:MessageMedia.Gateway.Server.#ctor(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new MessageMedia Server description
            </summary>
            <param name="address">the Web Address of the Server (eg "smsmaster.m4u.com.au")</param>
            <param name="timeout">Timeout settings for internet connection (seconds)</param>
            <param name="secureserver">Use https:// protocol to communicate with the MessageMedia Server</param>
            <param name="testmode">use this gateway in Test Mode (ie, don't post, just Log)</param>
        </member>
        <member name="M:MessageMedia.Gateway.Server.#ctor(System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new MessageMedia Server description
            </summary>
            <param name="address">the Web Address of the Server (eg "smsmaster.m4u.com.au")</param>
            <param name="timeout">Timeout settings for internet connection (seconds)</param>
            <param name="secureserver">Use https:// protocol to communicate with the MessageMedia Server</param>
            <param name="testmode">use this gateway in Test Mode (ie, don't post, just Log)</param>
            <param name="backup">use this gateway as a backup - only use if non-backup servers are down</param>
        </member>
        <member name="P:MessageMedia.Gateway.Server.Address">
            <summary>
            the MessageMedia Server Address
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.Server.TimeOut">
            <summary>
            Timeout settings for internet connection (seconds)
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.Server.SecureServer">
            <summary>
            Use https:// protocol to communicate with the MessageMedia Server
            </summary>
        </member>
        <member name="M:MessageMedia.Gateway.v2.CheckCreditAction.GetPost(MessageMedia.Account)">
            <summary>
            Prepares the POST string to perform a Check Credit action
            </summary>
            <param name="account">The Account object to use for Username and Password, etc</param>
            <returns>POST string</returns>
            <exception cref="T:MessageMedia.Exceptions.InvalidUserPassException"></exception>
        </member>
        <member name="M:MessageMedia.Gateway.xml.CreditReturn.#ctor">
            <summary>
            default constructor for xml
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.xml.CreditReturn.Balance">
            <summary>
            the credit balance of the account
            </summary>
        </member>
        <member name="T:MessageMedia.Gateway.ASync.ASyncStatusEventArgs">
            <summary>
            Arguments that are passed when the ASync object raises the event
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ASync.ASyncStatusEventArgs.Message">
            <summary>
            The message that was logged
            </summary>
        </member>
        <member name="T:MessageMedia.Gateway.ASync.ASyncStatusEventHandler">
            <summary>
            ASyncEventHandler delegate
            </summary>
            <param name="sender">the ASync object</param>
            <param name="e">the ASyncStatusEventArgs containing the message</param>
        </member>
        <member name="T:MessageMedia.UI.Editors.TimeConverter">
            <summary>
            Provides a type converter to convert TimeValue objects to and from other representations.
            </summary>
        </member>
        <member name="M:MessageMedia.UI.Editors.TimeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.</summary>
            <returns>True if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> should be called to find a common set of values the object supports, false otherwise.</returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context. </param>
        </member>
        <member name="M:MessageMedia.UI.Editors.TimeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>Returns whether the collection of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exclusive list of possible values, using the specified context.</summary>
            <returns>True if the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exhaustive list of possible values; false if other values are possible.</returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context. </param>
        </member>
        <member name="M:MessageMedia.UI.Editors.TimeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.</summary>
            <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> that holds a standard set of valid values, or null if the data type does not support a standard set of values.</returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null. </param>
        </member>
        <member name="M:MessageMedia.UI.Editors.TimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Returns whether this converter can convert the object to the specified type, using the specified context.</summary>
            <returns>True if this converter can perform the conversion, false otherwise.</returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context. </param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to. </param>
        </member>
        <member name="M:MessageMedia.UI.Editors.TimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
            <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed. </param>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context. </param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to. </param>
            <param name="value">The <see cref="T:System.Object"></see> to convert. </param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="M:MessageMedia.UI.Editors.TimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Gets a value indicating whether this converter can convert an object in the given source type to a string using the specified context.</summary>
            <returns>True if this converter can perform the conversion, false otherwise.</returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context. </param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from. </param>
        </member>
        <member name="M:MessageMedia.UI.Editors.TimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Converts the specified value object to a <see cref="T:System.String"></see> object.</summary>
            <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use. </param>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context. </param>
            <param name="value">The <see cref="T:System.Object"></see> to convert. </param>
            <exception cref="T:System.NotSupportedException">The conversion could not be performed. </exception>
        </member>
        <member name="T:MessageMedia.Common.MessageQueue">
            <summary>
            Outgoing message queue.
            </summary>
        </member>
        <member name="M:MessageMedia.Common.MessageQueue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MessageMedia.Common.MessageQueue.Add(MessageMedia.Common.MessageOut)">
            <summary>
            Adds a new message to this message queue.
            </summary>
            <param name="message">The message to add.</param>
        </member>
        <member name="M:MessageMedia.Common.MessageQueue.AddRange(System.Collections.Generic.IEnumerable{MessageMedia.Common.MessageOut})">
            <summary>
            Adds an array of messages to the message queue.
            </summary>
            <param name="messages">The messages to add.</param>
        </member>
        <member name="M:MessageMedia.Common.MessageQueue.FindAll(System.Predicate{MessageMedia.Common.MessageOut})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate"/> delegate that defines the conditions 
            of the elements to search for.</param>
            <returns>A <see cref="T:MessageMedia.Common.MessageQueue"/> containing all the elements that match the conditions 
            defined by the specified predicate, if found; otherwise, an empty <see cref="T:MessageMedia.Common.MessageQueue"/>.</returns>
        </member>
        <member name="M:MessageMedia.Common.MessageQueue.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source <see cref="T:MessageMedia.Common.MessageQueue"/>.
            </summary>
            <param name="index">The zero-based index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the source <see cref="T:MessageMedia.Common.MessageQueue"/>.</returns>
        </member>
        <member name="M:MessageMedia.Common.MessageQueue.CreateMessageBatch(System.Int32)">
            <summary>
            Creates a batch of ready-to-send messages and marks them as <see cref="F:MessageMedia.Common.MessageSendStatus.Batched"/>.
            </summary>
            <param name="batchSize">The number of messages to include in the batch.</param>
            <returns>A <see cref="T:MessageMedia.Common.MessageQueue"/> containing the message batch.</returns>
        </member>
        <member name="M:MessageMedia.Common.MessageQueue.RemoveAllMessagesStatus(MessageMedia.Common.MessageSendStatus)">
            <summary>
            Removes all messages from the queue with the specified status.
            </summary>
            <param name="status">The status of the messages to remove.</param>
            <returns>The messages that were removed.</returns>
        </member>
        <member name="M:MessageMedia.Common.MessageQueue.RemoveAllMessagesExceptStatus(MessageMedia.Common.MessageSendStatus)">
            <summary>
            Removes all messages from the queue that do not have the specified status.
            </summary>
            <param name="status">The status of the messages to remove.</param>
            <returns>The messages that were removed.</returns>
        </member>
        <member name="M:MessageMedia.Common.MessageQueue.ReadyToSend">
            <summary>
            Gets the number of messages in the queue that are marked <see cref="F:MessageMedia.Common.MessageSendStatus.ReadyToSend"/>.
            </summary>
            <returns>The number of messages that are ready to send.</returns>
        </member>
        <member name="T:MessageMedia.Gateway.ActionResult.CheckCreditResult">
            <summary>
            This class is used to return the result of a synchronous credit check (see <see cref="M:MessageMedia.Messaging.CheckCreditSynchronous(MessageMedia.Account)"/>).
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ActionResult.CheckCreditResult.Balance">
            <summary>
            Gets the account balance.
            </summary>
        </member>
        <member name="T:MessageMedia.SerializedFormat">
            <summary>
            Serialization format types.
            </summary>
        </member>
        <member name="F:MessageMedia.SerializedFormat.Binary">
            <summary>
            Binary serialization format.
            </summary>
        </member>
        <member name="F:MessageMedia.SerializedFormat.Document">
            <summary>
            Document serialization format.
            </summary>
        </member>
        <member name="T:MessageMedia.ObjectXMLSerializer`1">
            <summary>
            Facade to XML serialization and deserialization of strongly typed objects to/from an XML file.
            
            References: XML Serialization at http://samples.gotdotnet.com/:
            http://samples.gotdotnet.com/QuickStart/howto/default.aspx?url=/quickstart/howto/doc/xmlserialization/rwobjfromxml.aspx
            </summary>
        </member>
        <member name="M:MessageMedia.ObjectXMLSerializer`1.Load(System.String)">
            <summary>
            Loads an object from an XML file in Document format.
            </summary>
            <example>
            <code>
            serializableObject = ObjectXMLSerializer&lt;SerializableObject&gt;.Load(@"C:\XMLObjects.xml");
            </code>
            </example>
            <param name="path">Path of the file to load the object from.</param>
            <returns>Object loaded from an XML file in Document format.</returns>
        </member>
        <member name="M:MessageMedia.ObjectXMLSerializer`1.Load(System.String,MessageMedia.SerializedFormat)">
            <summary>
            Loads an object from an XML file using a specified serialized format.
            </summary>
            <example>
            <code>
            serializableObject = ObjectXMLSerializer&lt;SerializableObject&gt;.Load(@"C:\XMLObjects.xml", SerializedFormat.Binary);
            </code>
            </example>		
            <param name="path">Path of the file to load the object from.</param>
            <param name="serializedFormat">XML serialized format used to load the object.</param>
            <returns>Object loaded from an XML file using the specified serialized format.</returns>
        </member>
        <member name="M:MessageMedia.ObjectXMLSerializer`1.Load(System.String,System.Type[])">
            <summary>
            Loads an object from an XML file in Document format, supplying extra data types to enable deserialization of custom types within the object.
            </summary>
            <example>
            <code>
            serializableObject = ObjectXMLSerializer&lt;SerializableObject&gt;.Load(@"C:\XMLObjects.xml", new Type[] { typeof(MyCustomType) });
            </code>
            </example>
            <param name="path">Path of the file to load the object from.</param>
            <param name="extraTypes">Extra data types to enable deserialization of custom types within the object.</param>
            <returns>Object loaded from an XML file in Document format.</returns>
        </member>
        <member name="M:MessageMedia.ObjectXMLSerializer`1.Load(System.String,System.IO.IsolatedStorage.IsolatedStorageFile)">
            <summary>
            Loads an object from an XML file in Document format, located in a specified isolated storage area.
            </summary>
            <example>
            <code>
            serializableObject = ObjectXMLSerializer&lt;SerializableObject&gt;.Load("XMLObjects.xml", IsolatedStorageFile.GetUserStoreForAssembly());
            </code>
            </example>
            <param name="fileName">Name of the file in the isolated storage area to load the object from.</param>
            <param name="isolatedStorageDirectory">Isolated storage area directory containing the XML file to load the object from.</param>
            <returns>Object loaded from an XML file in Document format located in a specified isolated storage area.</returns>
        </member>
        <member name="M:MessageMedia.ObjectXMLSerializer`1.Load(System.String,System.IO.IsolatedStorage.IsolatedStorageFile,MessageMedia.SerializedFormat)">
            <summary>
            Loads an object from an XML file located in a specified isolated storage area, using a specified serialized format.
            </summary>
            <example>
            <code>
            serializableObject = ObjectXMLSerializer&lt;SerializableObject&gt;.Load("XMLObjects.xml", IsolatedStorageFile.GetUserStoreForAssembly(), SerializedFormat.Binary);
            </code>
            </example>		
            <param name="fileName">Name of the file in the isolated storage area to load the object from.</param>
            <param name="isolatedStorageDirectory">Isolated storage area directory containing the XML file to load the object from.</param>
            <param name="serializedFormat">XML serialized format used to load the object.</param>        
            <returns>Object loaded from an XML file located in a specified isolated storage area, using a specified serialized format.</returns>
        </member>
        <member name="M:MessageMedia.ObjectXMLSerializer`1.Load(System.String,System.IO.IsolatedStorage.IsolatedStorageFile,System.Type[])">
            <summary>
            Loads an object from an XML file in Document format, located in a specified isolated storage area, and supplying extra data types to enable deserialization of custom types within the object.
            </summary>
            <example>
            <code>
            serializableObject = ObjectXMLSerializer&lt;SerializableObject&gt;.Load("XMLObjects.xml", IsolatedStorageFile.GetUserStoreForAssembly(), new Type[] { typeof(MyCustomType) });
            </code>
            </example>		
            <param name="fileName">Name of the file in the isolated storage area to load the object from.</param>
            <param name="isolatedStorageDirectory">Isolated storage area directory containing the XML file to load the object from.</param>
            <param name="extraTypes">Extra data types to enable deserialization of custom types within the object.</param>
            <returns>Object loaded from an XML file located in a specified isolated storage area, using a specified serialized format.</returns>
        </member>
        <member name="M:MessageMedia.ObjectXMLSerializer`1.Save(`0,System.String)">
            <summary>
            Saves an object to an XML file in Document format.
            </summary>
            <example>
            <code>        
            SerializableObject serializableObject = new SerializableObject();
            
            ObjectXMLSerializer&lt;SerializableObject&gt;.Save(serializableObject, @"C:\XMLObjects.xml");
            </code>
            </example>
            <param name="serializableObject">Serializable object to be saved to file.</param>
            <param name="path">Path of the file to save the object to.</param>
        </member>
        <member name="M:MessageMedia.ObjectXMLSerializer`1.Save(`0,System.String,MessageMedia.SerializedFormat)">
            <summary>
            Saves an object to an XML file using a specified serialized format.
            </summary>
            <example>
            <code>
            SerializableObject serializableObject = new SerializableObject();
            
            ObjectXMLSerializer&lt;SerializableObject&gt;.Save(serializableObject, @"C:\XMLObjects.xml", SerializedFormat.Binary);
            </code>
            </example>
            <param name="serializableObject">Serializable object to be saved to file.</param>
            <param name="path">Path of the file to save the object to.</param>
            <param name="serializedFormat">XML serialized format used to save the object.</param>
        </member>
        <member name="M:MessageMedia.ObjectXMLSerializer`1.Save(`0,System.String,System.Type[])">
            <summary>
            Saves an object to an XML file in Document format, supplying extra data types to enable serialization of custom types within the object.
            </summary>
            <example>
            <code>        
            SerializableObject serializableObject = new SerializableObject();
            
            ObjectXMLSerializer&lt;SerializableObject&gt;.Save(serializableObject, @"C:\XMLObjects.xml", new Type[] { typeof(MyCustomType) });
            </code>
            </example>
            <param name="serializableObject">Serializable object to be saved to file.</param>
            <param name="path">Path of the file to save the object to.</param>
            <param name="extraTypes">Extra data types to enable serialization of custom types within the object.</param>
        </member>
        <member name="M:MessageMedia.ObjectXMLSerializer`1.Save(`0,System.String,System.IO.IsolatedStorage.IsolatedStorageFile)">
            <summary>
            Saves an object to an XML file in Document format, located in a specified isolated storage area.
            </summary>
            <example>
            <code>        
            SerializableObject serializableObject = new SerializableObject();
            
            ObjectXMLSerializer&lt;SerializableObject&gt;.Save(serializableObject, "XMLObjects.xml", IsolatedStorageFile.GetUserStoreForAssembly());
            </code>
            </example>
            <param name="serializableObject">Serializable object to be saved to file.</param>
            <param name="fileName">Name of the file in the isolated storage area to save the object to.</param>
            <param name="isolatedStorageDirectory">Isolated storage area directory containing the XML file to save the object to.</param>
        </member>
        <member name="M:MessageMedia.ObjectXMLSerializer`1.Save(`0,System.String,System.IO.IsolatedStorage.IsolatedStorageFile,MessageMedia.SerializedFormat)">
            <summary>
            Saves an object to an XML file located in a specified isolated storage area, using a specified serialized format.
            </summary>
            <example>
            <code>        
            SerializableObject serializableObject = new SerializableObject();
            
            ObjectXMLSerializer&lt;SerializableObject&gt;.Save(serializableObject, "XMLObjects.xml", IsolatedStorageFile.GetUserStoreForAssembly(), SerializedFormat.Binary);
            </code>
            </example>
            <param name="serializableObject">Serializable object to be saved to file.</param>
            <param name="fileName">Name of the file in the isolated storage area to save the object to.</param>
            <param name="isolatedStorageDirectory">Isolated storage area directory containing the XML file to save the object to.</param>
            <param name="serializedFormat">XML serialized format used to save the object.</param>        
        </member>
        <member name="M:MessageMedia.ObjectXMLSerializer`1.Save(`0,System.String,System.IO.IsolatedStorage.IsolatedStorageFile,System.Type[])">
            <summary>
            Saves an object to an XML file in Document format, located in a specified isolated storage area, and supplying extra data types to enable serialization of custom types within the object.
            </summary>
            <example>
            <code>
            SerializableObject serializableObject = new SerializableObject();
            
            ObjectXMLSerializer&lt;SerializableObject&gt;.Save(serializableObject, "XMLObjects.xml", IsolatedStorageFile.GetUserStoreForAssembly(), new Type[] { typeof(MyCustomType) });
            </code>
            </example>		
            <param name="serializableObject">Serializable object to be saved to file.</param>
            <param name="fileName">Name of the file in the isolated storage area to save the object to.</param>
            <param name="isolatedStorageDirectory">Isolated storage area directory containing the XML file to save the object to.</param>
            <param name="extraTypes">Extra data types to enable serialization of custom types within the object.</param>
        </member>
        <member name="T:MessageMedia.MMS.MMSVideoSlide">
            <summary>
            This class has not been implemented yet, it is just a placeholder for future work
            </summary>
        </member>
        <member name="T:MessageMedia.MMS.MMSSlide">
            <summary>
            Base Class for MMS Slides
            </summary>
        </member>
        <member name="P:MessageMedia.MMS.MMSSlide.SlideText">
            <summary>
            The Text for this slide
            </summary>
        </member>
        <member name="P:MessageMedia.MMS.MMSVideoSlide.SlideVideo">
            <summary>
            The Video to include in the MMS Slide. Not implemented Yet. 
            </summary>
        </member>
        <member name="T:MessageMedia.Gateway.ActionResult.ConfirmRepliesResult">
            <summary>
            This class is used to return the result of a synchronous reply confirmation (see <see cref="M:MessageMedia.Messaging.ConfirmRepliesSynchronous(MessageMedia.Account)"/>).
            </summary>
        </member>
        <member name="T:MessageMedia.MMS.MMSPictureSlide">
            <summary>
            MMS Slide containing an Image
            </summary>
        </member>
        <member name="P:MessageMedia.MMS.MMSPictureSlide.SlideImage">
            <summary>
            The Image to include in this slide
            </summary>
        </member>
        <member name="M:MessageMedia.Gateway.v2.SendMessagesAction.GetPost(MessageMedia.Account)">
            <summary>
            Prepares the POST string to perform a Send Message action
            </summary>
            <param name="account">The Account object to use for Username and Password, etc</param>
            <returns>POST string</returns>
            <exception cref="T:MessageMedia.Exceptions.InvalidUserPassException"></exception>
        </member>
        <member name="M:MessageMedia.Diagnostics.HighResTimer.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:MessageMedia.Diagnostics.HighResTimer.Start">
            <summary>
            Start the timer
            </summary>
            <returns>long - tick count</returns>
        </member>
        <member name="M:MessageMedia.Diagnostics.HighResTimer.Stop">
            <summary>
            Stop timer
            </summary>
            <returns>long - tick count</returns>
        </member>
        <member name="P:MessageMedia.Diagnostics.HighResTimer.Duration">
            <summary>
            Return the duration of the timer (in seconds)
            </summary>
            <returns>double - duration</returns>
        </member>
        <member name="P:MessageMedia.Diagnostics.HighResTimer.RecordedDuration">
            <summary>
            Return the total recorded duration of the timer (in seconds)
            </summary>
            <returns>double - recorded duration</returns>
        </member>
        <member name="P:MessageMedia.Diagnostics.HighResTimer.Frequency">
             <summary>
             Frequency of timer (no counts in one second on this machine)
             </summary>
            <returns>long - Frequency</returns>
        </member>
        <member name="T:MessageMedia.Common.MessageList">
            <summary>
            List of incoming messages.
            </summary>
        </member>
        <member name="T:MessageMedia.Diagnostics.EventLogger">
            <summary>
            Logger class that outputs log information to the system event log.
            </summary>
        </member>
        <member name="M:MessageMedia.Diagnostics.EventLogger.#ctor">
            <summary>
            Paramaterless constructor for XML.
            </summary>
        </member>
        <member name="M:MessageMedia.Diagnostics.EventLogger.#ctor(System.String)">
            <summary>
            Constructor for this class.
            </summary>
            <param name="Source">The event log "source" - usually the name of the application.</param>
            <exception cref="T:System.ArgumentException">If the <paramref name="Source"/> is invalid.</exception>
        </member>
        <member name="M:MessageMedia.Diagnostics.EventLogger.WriteLine(MessageMedia.Diagnostics.LogEntryType,System.String)">
            <summary>
            Outputs a line of text to the log.
            </summary>
            <param name="Type">The log entry type.</param>
            <param name="Text">The text to output.</param>
        </member>
        <member name="M:MessageMedia.Diagnostics.EventLogger.WriteLine(MessageMedia.Diagnostics.LogEntryType,System.String,System.Object[])">
            <summary>
            Outputs a line of text to the log, using standard string format notation.
            </summary>
            <param name="Type">The log entry type.</param>
            <param name="Format">The log message text containing zero or more format items.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:MessageMedia.Diagnostics.EventLogger.WriteException(System.Exception)">
            <summary>
            Outputs exception details to the log.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> object to output.</param>
        </member>
        <member name="P:MessageMedia.Diagnostics.EventLogger.Type">
            <summary>
            Gets the <see cref="T:MessageMedia.Diagnostics.LogType"/> of this instance.
            </summary>
            <returns>The <see cref="T:MessageMedia.Diagnostics.LogType"/> of this instance.</returns>
        </member>
        <member name="P:MessageMedia.Diagnostics.EventLogger.Settings">
            <summary>
            Gets any log settings in a concatenated string format.
            </summary>
            <returns>The log settings in a concatenated string format.</returns>
        </member>
        <member name="T:MessageMedia.SMS.Constants">
            <summary>
            Static class containing constants relating to SMS messaging.
            </summary>
        </member>
        <member name="F:MessageMedia.SMS.Constants.SMSMessageLength">
            <summary>
            SMS protocol single message length in characters.
            </summary>
        </member>
        <member name="F:MessageMedia.SMS.Constants.SMSBreakMessageFirst">
            <summary>
            When manually breaking messages, break the first message at this character or less
            to allow for appended "...(1/X)".
            </summary>
        </member>
        <member name="F:MessageMedia.SMS.Constants.SMSBreakMessageNext">
            <summary>
            When manually breaking messages, break the second and subsequent messages at this 
            character or less to allow for prepended "(2/X)", "(3/X)", etc.
            </summary>
        </member>
        <member name="F:MessageMedia.SMS.Constants.SMSBrokenMessageDelay">
            <summary>
            The delay in seconds used between sending manually broken messages.
            </summary>
        </member>
        <member name="F:MessageMedia.SMS.Constants.NokiaBreakMessageFirst">
            <summary>
            The number of characters allowed in the first message of a series of Nokia concatenated messages.
            </summary>
        </member>
        <member name="F:MessageMedia.SMS.Constants.NokiaBreakMessageNext">
            <summary>
            The number of characters allowed in subsequent messages of a series of Nokia concatenated messages.
            </summary>
        </member>
        <member name="T:MessageMedia.Resources.en_AU">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MessageMedia.Resources.en_AU.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MessageMedia.Resources.en_AU.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MessageMedia.Resources.en_AU.testing">
            <summary>
              Looks up a localized string similar to this is a test for the resourcecontroller.
            </summary>
        </member>
        <member name="M:MessageMedia.Gateway.v2.ChangePasswordAction.GetPost(MessageMedia.Account)">
            <summary>
            Prepares the POST string to perform a Check Credit action
            </summary>
            <param name="account">The Account object to use for Username and Password, etc</param>
            <returns>POST string</returns>
            <exception cref="T:MessageMedia.Exceptions.InvalidUserPassException">
            </exception>
            <exception cref="T:MessageMedia.Exceptions.NoNewPasswordException">
            </exception>
        </member>
        <member name="T:MessageMedia.Gateway.xml.UpdateDetailsAction">
            <summary>
            Update the client details on the gateway
            </summary>
        </member>
        <member name="M:MessageMedia.Gateway.xml.UpdateDetailsAction.GetPost(MessageMedia.Account)">
            <summary>
            Prepares the POST string to perform a Check Credit action
            </summary>
            <param name="account">The Account object to use for Username and Password, etc</param>
            <returns>POST string</returns>
            <exception cref="T:MessageMedia.Exceptions.InvalidUserPassException"></exception>
        </member>
        <member name="P:MessageMedia.Gateway.xml.UpdateDetailsAction.CommandName">
            <summary>
            The Command Type Identifyer
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.xml.UpdateDetailsAction.ActionType">
            <summary>
            the Type of Action 
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.xml.UpdateDetailsAction.ContactEmail">
            <summary>
            Contact Email Address
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.xml.UpdateDetailsAction.ContactPhone">
            <summary>
            Contact Phone Number
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.xml.UpdateDetailsAction.ContactName">
            <summary>
            Contact Name
            </summary>
        </member>
        <member name="T:MessageMedia.Common.CountryDetails">
            <summary>
            Contains details about each country's international prefix and phone number validation codes.
            </summary>
        </member>
        <member name="M:MessageMedia.Common.CountryDetails.#ctor">
            <summary>
            Default constructor. Leaves all properties uninitialised.
            </summary>
        </member>
        <member name="M:MessageMedia.Common.CountryDetails.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Full constructor, specifying all properties.
            </summary>
            <param name="country">The name of the country.</param>
            <param name="prefix">The international prefix.</param>
            <param name="validationcode">The regular expression string to use in validation.</param>
            <param name="voicevalidationcode">The regular expression string to use in validating voice messages.</param>
            <param name="servicenovalidationcode">The regular expression string to find service numbers - currently unused.</param>
        </member>
        <member name="M:MessageMedia.Common.CountryDetails.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Partial constructor, specifying all properties except the service number validation code.
            </summary>
            <param name="country">The name of the country.</param>
            <param name="prefix">The international prefix.</param>
            <param name="validationcode">The regular expression string to use in validation.</param>
            <param name="voicevalidationcode">The regular expression string to use in validating voice messages.</param>
        </member>
        <member name="M:MessageMedia.Common.CountryDetails.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Partial constructor, specifying all properties except the service and voice number validation codes.
            </summary>
            <remarks>
            When no voice number validation code is specified <paramref name="validationcode"/> is used instead.
            </remarks>
            <param name="country">The name of the country.</param>
            <param name="prefix">The international prefix.</param>
            <param name="validationcode">The regular expression string to use in validation.</param>
        </member>
        <member name="M:MessageMedia.Common.CountryDetails.#ctor(System.String,System.Int32)">
            <summary>
            Limited constructor, specifying country and prefix, but using the default validation codes.
            </summary>
            <remarks>
            The default regular expression validation code is <b>"[\d-[0]](\d){7,}"</b>.
            </remarks>
            <param name="country">The name of the country.</param>
            <param name="prefix">The international prefix.</param>
        </member>
        <member name="M:MessageMedia.Common.CountryDetails.Clone">
            <summary>
            Create a copy of this CountryDetails.
            </summary>
            <returns>A clone of this <see cref="T:MessageMedia.Common.CountryDetails"/> object.</returns>
        </member>
        <member name="M:MessageMedia.Common.CountryDetails.ToString">
            <summary>
            Gets a string representation of the country details.
            </summary>
            <returns>A string representation of the country details.</returns>
        </member>
        <member name="M:MessageMedia.Common.CountryDetails.CleanPhoneNumber(System.String)">
            <summary>
            Cleans all extraneous characters and adds the international prefix (if required).
            </summary>
            <param name="PhoneNumToClean">The phone number to clean.</param>
            <returns>The cleaned phone number.</returns>
        </member>
        <member name="M:MessageMedia.Common.CountryDetails.PhoneNumberIsValid(System.String)">
            <summary>
            Checks the validity of the phone number.
            </summary>
            <remarks>This function assumes service numbers are valid.</remarks>
            <param name="PhoneNum">The phone number to validate.</param>
            <returns>The validity of the phone number.</returns>
        </member>
        <member name="M:MessageMedia.Common.CountryDetails.PhoneNumberIsValid(System.String,System.Boolean)">
            <summary>
            Checks the validity of the phone number.
            </summary>
            <param name="PhoneNum">The phone number to validate.</param>
            <param name="serviceNumbersInvalid">If true service numbers are treated as invalid.</param>
            <returns>The validity of the phone number.</returns>
        </member>
        <member name="P:MessageMedia.Common.CountryDetails.Country">
            <summary>
            Gets or sets the name of the country.
            </summary>
        </member>
        <member name="P:MessageMedia.Common.CountryDetails.Prefix">
            <summary>
            Gets or sets the international prefix for the country.
            </summary>
        </member>
        <member name="P:MessageMedia.Common.CountryDetails.ValidationCode">
            <summary>
            Gets or sets the regular expression string used to validate mobile phone numbers.
            </summary>
            <value>The default value for this property is <b>@"[\d-[0]](\d){7,}"</b>.</value>
        </member>
        <member name="P:MessageMedia.Common.CountryDetails.VoiceValidationCode">
            <summary>
            Gets or sets the regular expression string used to validate landline phone numbers.
            </summary>
            <value>The default value for this property is <b>@"[\d-[0]](\d){7,}"</b>.</value>
        </member>
        <member name="P:MessageMedia.Common.CountryDetails.ServiceNoValidationCode">
            <summary>
            Gets or sets the regular expression string used to validate service phone numbers.
            </summary>
            <value>The default value for this property is <b>@""</b>.</value>
        </member>
        <member name="T:MessageMedia.Common.Countries">
            <summary>
            List of all the countries and their details.
            </summary>
        </member>
        <member name="M:MessageMedia.Common.Countries.CountryOfPhoneNumber(System.String)">
            <summary>
            Gets the <see cref="T:MessageMedia.Common.CountryDetails"/> for the country that the specified phone number belongs to.
            </summary>
            <param name="PhoneNum">The phone number to get country details for.</param>
            <returns>The <see cref="T:MessageMedia.Common.CountryDetails"/> for the country that the specified phone number belongs to, or null if not found.</returns>
        </member>
        <member name="P:MessageMedia.Common.Countries.Item(System.String)">
            <summary>
            Country name indexer to retrieve country details.
            </summary>
            <param name="Country">The country name.</param>
            <returns>The country details for named country, or null if not found.</returns>
        </member>
        <member name="P:MessageMedia.Common.Countries.Item(System.Int32)">
            <summary>
            Country prefix indexer to retrieve country details.
            </summary>
            <param name="Prefix">The country prefix.</param>
            <returns>The country details for specified prefix, or null if not found.</returns>
        </member>
        <member name="P:MessageMedia.Common.Countries.Australia">
            <summary>
            Returns standard details about Australia.
            </summary>
            <returns>Standard details about Australia.</returns>
        </member>
        <member name="P:MessageMedia.Common.Countries.UK">
            <summary>
            Returns standard details about UK.
            </summary>
            <returns>Standard details about UK.</returns>
        </member>
        <member name="P:MessageMedia.Common.Countries.US">
            <summary>
            Returns standard details about US.
            </summary>
            <returns>Standard details about US.</returns>
        </member>
        <member name="P:MessageMedia.Common.Countries.NZ">
            <summary>
            Returns standard details about NZ.
            </summary>
            <returns>Standard details about NZ.</returns>
        </member>
        <member name="P:MessageMedia.Common.Countries.All">
            <summary>
            List of all countries.
            </summary>
        </member>
        <member name="T:MessageMedia.Gateway.ASync.ASyncCompletedEventArgs">
            <summary>
            Arguments that are passed when the ASync object raises the event
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ASync.ASyncCompletedEventArgs.Return">
            <summary>
            The details of the Return from the Server
            </summary>
        </member>
        <member name="P:MessageMedia.Gateway.ASync.ASyncCompletedEventArgs.Action">
            <summary>
            the action (if any) that this is returning from
            </summary>
        </member>
        <member name="T:MessageMedia.Account">
            <summary>
            This class stores MessageMedia account details.
            </summary>
        </member>
        <member name="M:MessageMedia.Account.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MessageMedia.Account.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:MessageMedia.Account"/> object with the specified username and password.
            </summary>
            <param name="UserName">The username for the account.</param>
            <param name="Password">The password for the account.</param>
        </member>
        <member name="M:MessageMedia.Account.Clone">
            <summary>
            Create a copy of this <see cref="T:MessageMedia.Account"/> instance.
            </summary>
            <returns>A clone of this <see cref="T:MessageMedia.Account"/> object.</returns>
        </member>
        <member name="M:MessageMedia.Account.ChangePassword(System.String)">
            <summary>
            Changes the password of this account to the new value.
            </summary>
            <param name="newPassword">The new password</param>
            <returns>True if password was successfully changed, false otherwise.</returns>
            <remarks>
            This method will contact the MessageMedia gateway to change the account password.
            If the password is changed successfully <see cref="P:MessageMedia.Account.Password"/> will hold the new value.
            </remarks>
        </member>
        <member name="M:MessageMedia.Account.LoadSettings(Microsoft.Win32.RegistryKey)">
            <summary>
            Loads the settings from the specified registry key.
            </summary>
            <param name="FromRegistryKey">An existing registry key, with read/write permissions.</param>
            <returns>True if the values were successfully loaded, or false if there was an error.</returns>
        </member>
        <member name="M:MessageMedia.Account.SaveSettings(Microsoft.Win32.RegistryKey)">
            <summary>
            Save the settings to the specified registry key.
            </summary>
            <param name="ToRegistryKey">An existing registry key, with read/write permissions.</param>
            <returns>True if the values were successfully saved, or false if there was an error.</returns>
        </member>
        <member name="M:MessageMedia.Account.LoadSettings(System.String)">
            <summary>
            Loads the settings from the specified file.
            </summary>
            <param name="FileName">An existing XML file, with read/write permissions.</param>
            <returns>True if the values were successfully loaded, or false if there was an error.</returns>
        </member>
        <member name="M:MessageMedia.Account.SaveSettings(System.String)">
            <summary>
            Saves the settings to the specified file.
            </summary>
            <param name="FileName">An XML file, with read/write permissions.</param>
            <returns>True if the values were successfully saved, or false if there was an error.</returns>
        </member>
        <member name="P:MessageMedia.Account.User">
            <summary>
            Gets or sets the username to use to connect to the MessageMedia gateway.
            </summary>
            <remarks>
            The username and password used to connect to the MessageMedia gateway is
            supplied by MessageMedia when the user signs up for a product trial or
            for commercial use.
            </remarks>
        </member>
        <member name="P:MessageMedia.Account.Password">
            <summary>
            Gets or sets the password to use to log in to the MessageMedia gateway.
            </summary>
            <remarks>
            The username and password used to connect to the MessageMedia gateway is
            supplied by MessageMedia when the user signs up for a product trial or
            for commercial use.
            </remarks>
        </member>
        <member name="P:MessageMedia.Account.ContactEmail">
            <summary>
            Gets or sets the email address of the user.
            </summary>
            <remarks>
            Setting the email address of the account holder is important as it
            provides MessageMedia with the ability to contact customers
            in relation to service issues and other important information.
            </remarks>
        </member>
        <member name="P:MessageMedia.Account.ContactPhone">
            <summary>
            Gets or sets the mobile phone number of the user.
            </summary>
            <remarks>
            Setting the mobile phone number of the account holder is important as it
            provides MessageMedia with the ability to contact customers
            in relation to service issues and other important information.
            </remarks>
        </member>
        <member name="P:MessageMedia.Account.ContactLandLine">
            <summary>
            Gets or sets the landline phone number of the user.
            </summary>
            <remarks>
            Setting the landline phone number of the account holder is important as it
            provides MessageMedia with the ability to contact customers
            in relation to service issues and other important information.
            </remarks>
        </member>
        <member name="P:MessageMedia.Account.ContactFirstName">
            <summary>
            Gets or sets first name of the user.
            </summary>
        </member>
        <member name="P:MessageMedia.Account.ContactLastName">
            <summary>
            Gets or sets last name of the user.
            </summary>
        </member>
        <member name="P:MessageMedia.Account.Country">
            <summary>
            Gets or sets details about the user's country of origin.
            </summary>
        </member>
        <member name="P:MessageMedia.Account.Balance">
            <summary>
            Gets or sets the current credit balance of the account.        
            </summary>
            <remarks>
            This will return -1 until the balance has been checked on the gateway. This value is updated when
            the application communicates with the MessageMedia gateway. It should not be set by the user.
            </remarks>
        </member>
        <member name="T:MessageMedia.MMS.MMSSlides">
            <summary>
            Collection of MMS Slides
            </summary>
        </member>
        <member name="T:MessageMedia.Schedule.YearlyRecurrence">
            <summary>
            Abstract base class for yearly recurrence. Use concrete classes <see cref="T:MessageMedia.Schedule.YearlyDateRecurrence"/> or <see cref="T:MessageMedia.Schedule.YearlyDayRecurrence"/>.
            </summary>
        </member>
        <member name="P:MessageMedia.Schedule.YearlyRecurrence.Month">
            <summary>
            Gets or sets the month in which the message will be sent each year (e.g. January).
            </summary>
        </member>
        <member name="T:MessageMedia.Schedule.YearlyDateRecurrence">
            <summary>
            Messages of this recurrence type will be sent on a fixed date each year, e.g. 5th of January.
            </summary>
        </member>
        <member name="M:MessageMedia.Schedule.YearlyDateRecurrence.ToString">
            <summary>
            Format the schedule into human readable format.
            </summary>
            <returns>The schedule description as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="P:MessageMedia.Schedule.YearlyDateRecurrence.Date">
            <summary>
            Gets or sets the day of the month on which the message will be sent.
            </summary>
        </member>
        <member name="T:MessageMedia.Schedule.YearlyDayRecurrence">
            <summary>
            Messages of this recurrence type will be sent on a certain day each year. For example, the first Sunday of September (Father's Day).
            </summary>
        </member>
        <member name="M:MessageMedia.Schedule.YearlyDayRecurrence.ToString">
            <summary>
            Format the schedule into human readable format.
            </summary>
            <returns>The schedule description as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="P:MessageMedia.Schedule.YearlyDayRecurrence.Sequence">
            <summary>
            Gets or sets the sequence of the day to use.
            </summary>
        </member>
        <member name="P:MessageMedia.Schedule.YearlyDayRecurrence.Day">
            <summary>
            Gets or sets the day of the week on which the message will be sent.
            </summary>
        </member>
        <member name="T:MessageMedia.Diagnostics.WebLogger">
            <summary>
            Logger class that posts log information to a specified URL.
            </summary>
        </member>
        <member name="M:MessageMedia.Diagnostics.WebLogger.#ctor">
            <summary>
            Paramaterless constructor for XML.
            </summary>
        </member>
        <member name="M:MessageMedia.Diagnostics.WebLogger.#ctor(System.String)">
            <summary>
            Constructor for this class.
            </summary>
            <param name="URL">The URL to send logging information to.</param>
        </member>
        <member name="M:MessageMedia.Diagnostics.WebLogger.WriteLine(MessageMedia.Diagnostics.LogEntryType,System.String)">
            <summary>
            Outputs a line of text to the log. Not implemented.
            </summary>
            <param name="Type">The log entry type.</param>
            <param name="Text">The text to output.</param>
            <remarks>Function not implemented. Throws <see cref="T:System.Exception"/>.</remarks>
        </member>
        <member name="M:MessageMedia.Diagnostics.WebLogger.WriteLine(MessageMedia.Diagnostics.LogEntryType,System.String,System.Object[])">
            <summary>
            Outputs a line of text to the log, using standard string format notation. Not implemented.
            </summary>
            <param name="Type">The log entry type.</param>
            <param name="Format">The log message text containing zero or more format items.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
            <remarks>Function not implemented. Throws <see cref="T:System.Exception"/>.</remarks>
        </member>
        <member name="M:MessageMedia.Diagnostics.WebLogger.WriteException(System.Exception)">
            <summary>
            Outputs exception details to the log. Not implemented.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> object to output.</param>
            <remarks>Function not implemented. Throws <see cref="T:System.Exception"/>.</remarks>
        </member>
        <member name="P:MessageMedia.Diagnostics.WebLogger.Type">
            <summary>
            Gets the <see cref="T:MessageMedia.Diagnostics.LogType"/> of this instance.
            </summary>
            <returns>The <see cref="T:MessageMedia.Diagnostics.LogType"/> of this instance.</returns>
        </member>
        <member name="P:MessageMedia.Diagnostics.WebLogger.Settings">
            <summary>
            Gets any log settings in a concatenated string format.
            </summary>
            <returns>The log settings in a concatenated string format.</returns>
        </member>
        <member name="M:MessageMedia.Gateway.v2.CheckRepliesAction.GetPost(MessageMedia.Account)">
            <summary>
            Prepares the POST string to perform a Check Replies
            </summary>
            <param name="account">The Account object to use for Username and Password, etc</param>
            <returns>POST string</returns>
            <exception cref="T:MessageMedia.Exceptions.InvalidUserPassException"></exception>
        </member>
        <member name="T:MessageMedia.Email.EmailMessage">
            <summary>
            Details of the Email message.
            </summary>
        </member>
        <member name="M:MessageMedia.Email.EmailMessage.#ctor">
            <summary>
            Default contructor for new SMSMessage
            </summary>
        </member>
        <member name="M:MessageMedia.Email.EmailMessage.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor specifying message parameters
            </summary>
            <param name="emailaddress">The email address to send the message to</param>
            <param name="MsgText">The Text of the Message to Send</param>
            <param name="Delay">The Delay (in seconds) to wait before sending</param>
            <param name="MessageId">The MessageID</param>
        </member>
        <member name="M:MessageMedia.Email.EmailMessage.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructor specifying message parameters
            </summary>
            <param name="emailaddress">The email address to send the message to</param>
            <param name="MsgText">The Text of the Message to Send</param>
            <param name="Delay">The Delay (in seconds) to wait before sending</param>
        </member>
        <member name="M:MessageMedia.Email.EmailMessage.#ctor(System.String,System.String)">
            <summary>
            Constructor specifying message parameters
            </summary>
            <param name="emailaddress">The email address to send the message to</param>
            <param name="MsgText">The Text of the Message to Send</param>
        </member>
        <member name="M:MessageMedia.Email.EmailMessage.CreditCheckText(System.String)">
            <summary>
            Checks how many message credits will be used by the supplied text
            </summary>
            <param name="MessageText">the message text to check</param>
            <returns>the number of credits it would cost to send this message</returns>
        </member>
        <member name="M:MessageMedia.Email.EmailMessage.PostString">
            <summary>
            Message formatted and ready to send to the Gateway
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
